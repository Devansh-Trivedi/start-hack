function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var nextjsWebsocket = require('nextjs-websocket');
var _ = _interopDefault(require('lodash'));
var axios = _interopDefault(require('axios'));
var reactChatEngine = require('react-chat-engine');
var icons = require('@ant-design/icons');
var reactGridSystem = require('react-grid-system');
var reactScroll = require('react-scroll');

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

var Socket = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Socket, _Component);

  function Socket() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      client: undefined,
      props: null
    };
    return _this;
  }

  var _proto = Socket.prototype;

  _proto.handleEvent = function handleEvent(event) {
    var props = this.props;
    var eventJSON = JSON.parse(event);

    if (eventJSON.action === 'login_error') {
      console.log("Your login credentials were not correct: \n\n                Project ID: " + props.projectID + " \n\n                Username: " + props.userName + " \n\n                User Secret: " + props.userSecret + "\n\n                Double check these credentials to make sure they're correct.\n\n                If all three are correct, try resetting the username and secret in the Online Dashboard or Private API.");
      this.props.onFailAuth && this.props.onFailAuth(this.props);
    } else if (eventJSON.action === 'is_typing') {
      props.onTyping && props.onTyping(eventJSON.data.id, eventJSON.data.person);
    } else if (eventJSON.action === 'new_chat') {
      props.onNewChat && props.onNewChat(eventJSON.data);
    } else if (eventJSON.action === 'edit_chat') {
      props.onEditChat && props.onEditChat(eventJSON.data);
    } else if (eventJSON.action === 'delete_chat') {
      props.onDeleteChat && props.onDeleteChat(eventJSON.data);
    } else if (eventJSON.action === 'add_person') {
      props.onAddPerson && props.onAddPerson(eventJSON.data);
    } else if (eventJSON.action === 'remove_person') {
      props.onRemovePerson && props.onRemovePerson(eventJSON.data);
    } else if (eventJSON.action === 'new_message') {
      props.onNewMessage && props.onNewMessage(eventJSON.data.id, eventJSON.data.message);
    } else if (eventJSON.action === 'edit_message') {
      props.onEditMessage && props.onEditMessage(eventJSON.data.id, eventJSON.data.message);
    } else if (eventJSON.action === 'delete_message') {
      props.onDeleteMessage && props.onDeleteMessage(eventJSON.data.id, eventJSON.data.message);
    }
  };

  _proto.onClose = function onClose() {
    this.props.onDisconnect && this.props.onDisconnect();
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props = this.props,
        publicKey = _this$props.publicKey,
        projectID = _this$props.projectID,
        userName = _this$props.userName,
        userPassword = _this$props.userPassword,
        userSecret = _this$props.userSecret,
        development = _this$props.development;
    var wsStart = development ? 'ws://' : 'wss://';
    var rootHost = development ? '127.0.0.1:8000' : 'api.chatengine.io';
    var project = publicKey ? publicKey : projectID;
    var secret = userPassword ? userPassword : userSecret;
    return /*#__PURE__*/React__default.createElement(nextjsWebsocket.WebSocket, {
      url: "" + wsStart + rootHost + "/person/?publicKey=" + project + "&username=" + userName + "&secret=" + secret,
      onOpen: function onOpen() {
        return _this2.props.onConnect && _this2.props.onConnect(_this2.props);
      },
      onClose: this.onClose.bind(this),
      onMessage: this.handleEvent.bind(this),
      reconnectIntervalInMilliSeconds: 3000
    });
  };

  return Socket;
}(React.Component);

function getApiUrl(props) {
  if (props && props.development) {
    return 'http://127.0.0.1:8000';
  }

  return 'https://api.chatengine.io';
}

function getChats(props, callback) {
  axios.get(getApiUrl(props) + "/chats/", {
    headers: {
      "Public-Key": props.publicKey ? props.publicKey : props.projectID,
      "User-Name": props.userName,
      "User-Secret": props.userPassword ? props.userPassword : props.userSecret
    }
  }).then(function (response) {
    props.onGetChats && props.onGetChats(response.data);
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('Fetch Chats Error', error);
  });
}

function newChat(props, data, callback) {
  axios.post(getApiUrl(props) + "/chats/", data, {
    headers: {
      "Public-Key": props.publicKey ? props.publicKey : props.projectID,
      "User-Name": props.userName,
      "User-Secret": props.userPassword ? props.userPassword : props.userSecret
    }
  }).then(function (response) {
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('New Chat Error', error);
  });
}

function editChat(props, chatId, data, callback) {
  axios.patch(getApiUrl(props) + "/chats/" + chatId + "/", data, {
    headers: {
      "Public-Key": props.publicKey ? props.publicKey : props.projectID,
      "User-Name": props.userName,
      "User-Secret": props.userPassword ? props.userPassword : props.userSecret
    }
  }).then(function (response) {
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('Edit Chat Error', error);
  });
}

function deleteChat(props, chatId, callback) {
  axios["delete"](getApiUrl(props) + "/chats/" + chatId + "/", {
    headers: {
      "Public-Key": props.publicKey ? props.publicKey : props.projectID,
      "User-Name": props.userName,
      "User-Secret": props.userPassword ? props.userPassword : props.userSecret
    }
  }).then(function (response) {
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('Delete Chat Error', error);
  });
}

function getMessages(props, chatId, callback) {
  axios.get(getApiUrl(props) + "/chats/" + chatId + "/messages/", {
    headers: {
      "Public-Key": props.publicKey ? props.publicKey : props.projectID,
      "User-Name": props.userName,
      "User-Secret": props.userPassword ? props.userPassword : props.userSecret
    }
  }).then(function (response) {
    props.onGetMessages && props.onGetMessages(chatId, response.data);
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('Fetch Messages Error', error);
  });
}

function sendMessage(props, chatId, data, callback) {
  var formdata = new FormData();

  if (data.attachments) {
    for (var i = 0; i < data.attachments.length; i++) {
      formdata.append('attachments', data.attachments[i], data.attachments[i].name);
    }
  } else if (data.files) {
    for (var _i = 0; _i < data.files.length; _i++) {
      formdata.append('attachments', data.files[_i], data.files[_i].name);
    }
  }

  formdata.append('text', data.text);
  formdata.append('sender_username', data.sender_username);
  formdata.append('custom_json', JSON.stringify(data.custom_json ? data.custom_json : {}));
  axios.post(getApiUrl(props) + "/chats/" + chatId + "/messages/", formdata, {
    headers: {
      "Public-Key": props.publicKey ? props.publicKey : props.projectID,
      "User-Name": props.userName,
      "User-Secret": props.userPassword ? props.userPassword : props.userSecret
    }
  }).then(function (response) {
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('Send Messages Error', error);
  });
}

function editMessage(props, chatId, messageId, data, callback) {
  axios.patch(getApiUrl(props) + "/chats/" + chatId + "/messages/" + messageId + "/", data, {
    headers: {
      "Public-Key": props.publicKey ? props.publicKey : props.projectID,
      "User-Name": props.userName,
      "User-Secret": props.userPassword ? props.userPassword : props.userSecret
    }
  }).then(function (response) {
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('Delete Messages Error', error);
  });
}

function readMessage(props, chatId, messageId, callback) {
  axios.patch(getApiUrl(props) + "/chats/" + chatId + "/people/", {
    last_read: messageId
  }, {
    headers: {
      "Public-Key": props.publicKey ? props.publicKey : props.projectID,
      "User-Name": props.userName,
      "User-Secret": props.userPassword ? props.userPassword : props.userSecret
    }
  }).then(function (response) {
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('Send Messages Error', error);
  });
}

function deleteMessage(props, chatId, messageId, callback) {
  axios["delete"](getApiUrl(props) + "/chats/" + chatId + "/messages/" + messageId + "/", {
    headers: {
      "Public-Key": props.publicKey ? props.publicKey : props.projectID,
      "User-Name": props.userName,
      "User-Secret": props.userPassword ? props.userPassword : props.userSecret
    }
  }).then(function (response) {
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('Delete Messages Error', error);
  });
}

var ChatForm = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(ChatForm, _React$Component);

  function ChatForm() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      value: ''
    };
    return _this;
  }

  var _proto = ChatForm.prototype;

  _proto.handleChange = function handleChange(event) {
    this.setState({
      value: event.target.value
    });
  };

  _proto.handleSubmit = function handleSubmit(event) {
    event.preventDefault();

    if (this.state.value.trim().length > 0) {
      reactChatEngine.newChat(this.props, {
        title: this.state.value
      }, function () {});
    }

    this.setState({
      value: ''
    });
  };

  _proto.render = function render() {
    var _this2 = this;

    return /*#__PURE__*/React__default.createElement("form", {
      onSubmit: this.handleSubmit.bind(this)
    }, /*#__PURE__*/React__default.createElement("div", {
      style: {
        height: '1px'
      }
    }, /*#__PURE__*/React__default.createElement(reactChatEngine.TextInput, {
      label: "New Chat",
      value: this.state.value,
      style: {
        width: 'calc(100% - 48px)'
      },
      handleChange: function handleChange(e) {
        return _this2.handleChange(e);
      }
    })), /*#__PURE__*/React__default.createElement("div", {
      style: {
        width: '100%',
        textAlign: 'right'
      }
    }, /*#__PURE__*/React__default.createElement(reactChatEngine.Button, {
      icon: "plus",
      type: "submit"
    })));
  };

  return ChatForm;
}(React__default.Component);

function timeSinceDate(date) {
  if (!date) return '';
  var day = date.substr(8, 2);
  var month = date.substr(5, 2);
  var year = date.substr(0, 4);
  var hour = date.substr(11, 2);
  var minute = date.substr(14, 2);
  var second = date.substr(17, 2);
  var sent = new Date(month + " " + day + " " + year);
  sent.setHours(hour);
  sent.setMinutes(minute);
  sent.setSeconds(second);
  sent = sent.toString();
  var dayStr = sent.substr(0, 10);
  var timeStr = sent.substr(15, 6);
  return dayStr + " at " + timeStr;
}
function daySinceSent(date) {
  if (!date) return '';
  var day = date.substr(8, 2);
  var month = date.substr(5, 2);
  var year = date.substr(0, 4);
  var sent = new Date(month + " " + day + " " + year).toString();
  return sent.substr(4, 6);
}

var ChatCard = /*#__PURE__*/function (_Component) {
  _inheritsLoose(ChatCard, _Component);

  function ChatCard() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = ChatCard.prototype;

  _proto.readLastMessage = function readLastMessage(chat) {
    var _this = this;

    var readLastMessage = true;
    chat.people.map(function (chat_person) {
      if (_this.props.userName === chat_person.person.username) {
        readLastMessage = chat.last_message.id === chat_person.last_read;
      }
    });
    return readLastMessage;
  };

  _proto.render = function render() {
    var _this2 = this;

    var chat = this.props.chat;
    var extraStyle = this.props.activeChat === chat.id ? styles.activeChat : {};
    var otherPerson = chat.people.find(function (person) {
      return person.person.username !== _this2.props.userName;
    });

    if (this.props.renderChatCard) {
      return /*#__PURE__*/React__default.createElement("div", {
        key: "chat_" + index
      }, this.props.renderChatCard(chat, index));
    }

    var lastMessage = chat.last_message.text;

    if (!lastMessage) {
      lastMessage = chat.last_message.attachments.length > 0 ? chat.last_message.attachments.length + " image" + (chat.last_message.attachments.length > 1 ? 's' : '') : 'Say hello!';
    }

    return /*#__PURE__*/React__default.createElement("div", {
      onClick: function onClick() {
        return _this2.props.onChatClick(chat.id);
      },
      style: _extends({}, styles.chatContainer, extraStyle),
      className: "ce-chat-card " + (this.props.activeChat === chat.id && 'ce-active-chat-card')
    }, /*#__PURE__*/React__default.createElement("div", {
      style: styles.titleText,
      className: "ce-chat-title-text"
    }, chat.is_direct_chat && otherPerson ? otherPerson.person.username : chat.title, !this.readLastMessage(chat) && /*#__PURE__*/React__default.createElement("div", {
      className: "ce-chat-unread-dot",
      style: {
        "float": 'right',
        width: '12px',
        height: '12px',
        borderRadius: '6px',
        backgroundColor: '#1890ff',
        display: 'inline-block'
      }
    })), /*#__PURE__*/React__default.createElement("div", {
      style: {
        width: '100%'
      },
      className: "ce-chat-subtitle"
    }, /*#__PURE__*/React__default.createElement("div", {
      style: styles.messageText,
      className: "ce-chat-subtitle-text ce-chat-subtitle-message"
    }, lastMessage), /*#__PURE__*/React__default.createElement("div", {
      className: "ce-chat-subtitle-text ce-chat-subtitle-date",
      style: _extends({}, styles.messageText, {
        textAlign: 'right',
        width: '25%'
      })
    }, daySinceSent(chat.last_message.created))));
  };

  return ChatCard;
}(React.Component);

var styles = {
  chatContainer: {
    padding: '16px',
    paddingBottom: '12px',
    cursor: 'pointer'
  },
  titleText: {
    fontWeight: '500',
    paddingBottom: '4px',
    whiteSpace: 'nowrap',
    overflow: 'hidden'
  },
  messageText: {
    width: '75%',
    color: 'rgba(153, 153, 153, 1)',
    fontSize: '14px',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    display: 'inline-block'
  },
  activeChat: {
    backgroundColor: '#d9d9d9',
    border: '4px solid white',
    borderRadius: '12px'
  }
};

var ChatList = /*#__PURE__*/function (_Component) {
  _inheritsLoose(ChatList, _Component);

  function ChatList() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = ChatList.prototype;

  _proto.readLastMessage = function readLastMessage(chat) {
    var _this = this;

    var readLastMessage = true;
    chat.people.map(function (chat_person) {
      if (_this.props.userName === chat_person.person.username) {
        readLastMessage = chat.last_message.id === chat_person.last_read;
      }
    });
    return readLastMessage;
  };

  _proto.renderChats = function renderChats(chats) {
    var _this2 = this;

    return chats.map(function (chat, index) {
      if (!chat) return /*#__PURE__*/React__default.createElement("div", {
        key: "chat_" + index
      });

      if (_this2.props.renderChatCard) {
        return /*#__PURE__*/React__default.createElement("div", {
          key: "chat_" + index
        }, _this2.props.renderChatCard(chat, index));
      } else {
        return /*#__PURE__*/React__default.createElement(ChatCard, _extends({
          key: "chat_" + index
        }, _this2.props, {
          chat: chat
        }));
      }
    });
  };

  _proto.render = function render() {
    var chats = this.props.chats ? Object.values(this.props.chats) : [];
    chats.sort(function (a, b) {
      var aDate = a.last_message.created ? new Date(a.last_message.created) : new Date(a.created);
      var bDate = b.last_message.created ? new Date(b.last_message.created) : new Date(b.created);
      return new Date(bDate) - new Date(aDate);
    });
    return /*#__PURE__*/React__default.createElement("div", {
      style: styles$1.chatListContainer,
      className: "ce-chat-list"
    }, /*#__PURE__*/React__default.createElement("div", {
      style: styles$1.chatsContainer,
      className: "ce-chats-container"
    }, this.renderChats(chats), /*#__PURE__*/React__default.createElement("div", {
      style: {
        height: '64px'
      }
    }), this.props.renderNewChatForm ? this.props.renderNewChatForm(this.props) : /*#__PURE__*/React__default.createElement("div", {
      style: styles$1.newChatContainer,
      className: "ce-chat-form-container"
    }, /*#__PURE__*/React__default.createElement(ChatForm, _extends({}, this.props, {
      className: "ce-chat-form"
    })))));
  };

  return ChatList;
}(React.Component);

var styles$1 = {
  chatListContainer: {
    height: '100%',
    maxHeight: '100vh',
    overflow: 'scroll',
    overflowX: 'hidden',
    borderRight: '1px solid #afafaf',
    backgroundColor: 'white'
  },
  chatsContainer: {
    width: '100%',
    backgroundColor: 'white',
    borderRadius: '0px 0px 24px 24px'
  },
  chatContainer: {
    padding: '16px',
    paddingBottom: '12px',
    cursor: 'pointer'
  },
  titleText: {
    fontWeight: '500',
    paddingBottom: '4px',
    whiteSpace: 'nowrap',
    overflow: 'hidden'
  },
  messageText: {
    width: '75%',
    color: 'rgba(153, 153, 153, 1)',
    fontSize: '14px',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    display: 'inline-block'
  },
  activeChat: {
    backgroundColor: '#d9d9d9',
    border: '4px solid white',
    borderRadius: '12px'
  },
  newChatContainer: {
    position: 'absolute',
    bottom: '0px',
    padding: '12px',
    width: 'calc(100% - 25px)',
    backgroundColor: 'white'
  }
};

var ChatListDrawer = /*#__PURE__*/function (_Component) {
  _inheritsLoose(ChatListDrawer, _Component);

  function ChatListDrawer() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      isOpen: false
    };
    return _this;
  }

  var _proto = ChatListDrawer.prototype;

  _proto.render = function render() {
    var _this2 = this;
    return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(icons.MenuOutlined, {
      onClick: function onClick() {
        return _this2.setState({
          isOpen: true
        });
      },
      style: {
        color: 'rgb(24, 144, 255)',
        outline: 'none'
      }
    }), this.state.isOpen && /*#__PURE__*/React__default.createElement("div", {
      style: styles$2.drawerContainer
    }, /*#__PURE__*/React__default.createElement(icons.CloseOutlined, {
      style: styles$2.closeIcon,
      onClick: function onClick() {
        return _this2.setState({
          isOpen: false
        });
      }
    }), /*#__PURE__*/React__default.createElement("div", {
      style: styles$2.titleContainer
    }, /*#__PURE__*/React__default.createElement("div", {
      style: styles$2.titleText
    }, "My Chats")), /*#__PURE__*/React__default.createElement(ChatList, _extends({}, this.props, {
      onChatClick: function onChatClick(chatId) {
        _this2.props.onChatClick && _this2.props.onChatClick(chatId);

        _this2.setState({
          isOpen: false
        });
      }
    }))));
  };

  return ChatListDrawer;
}(React.Component);
var styles$2 = {
  drawerContainer: {
    position: 'fixed',
    zIndex: '1',
    top: '0px',
    left: '0px',
    width: '100%',
    height: '100%',
    backgroundColor: 'white',
    textAlign: 'left'
  },
  closeIcon: {
    position: 'absolute',
    left: '28px',
    top: '32px'
  },
  titleContainer: {
    width: '100%',
    padding: '24px 0px',
    textAlign: 'center',
    color: 'rgb(24, 144, 255)'
  },
  titleText: {
    fontSize: '24px',
    fontWeight: '600'
  }
};

var Person = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Person, _Component);

  function Person() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      selected: false
    };
    return _this;
  }

  var _proto = Person.prototype;

  _proto.onRemovePerson = function onRemovePerson() {
    reactChatEngine.removePerson(this.props.creds, this.props.chat.id, this.props.person.username);
  };

  _proto.renderPersonText = function renderPersonText(person) {
    if (person.first_name !== null) {
      return "" + person.first_name + (person.last_name ? " " + person.last_name : '');
    } else {
      return person.username;
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props = this.props,
        person = _this$props.person,
        chat = _this$props.chat,
        creds = _this$props.creds;

    if (!person || !chat) {
      return /*#__PURE__*/React__default.createElement("div", null);
    }

    var admin = chat.admin;
    return /*#__PURE__*/React__default.createElement("div", {
      className: "ce-person-container",
      onMouseEnter: function onMouseEnter() {
        return _this2.setState({
          selected: true
        });
      },
      onMouseLeave: function onMouseLeave() {
        return _this2.setState({
          selected: false
        });
      }
    }, /*#__PURE__*/React__default.createElement("div", {
      className: "ce-person-avatar",
      style: {
        padding: '2px',
        height: '0px'
      }
    }, /*#__PURE__*/React__default.createElement(reactChatEngine.Avatar, {
      avatar: person.avatar,
      username: person.username,
      is_online: person.is_online
    })), /*#__PURE__*/React__default.createElement("div", {
      className: "ce-person-text",
      style: {
        paddingLeft: '52px',
        height: '44px',
        position: 'relative',
        top: '10px',
        fontSize: '15px'
      }
    }, this.renderPersonText(person)), this.state.selected && creds.userName === admin.username && person.username !== admin.username && /*#__PURE__*/React__default.createElement("div", {
      className: "ce-delete-chat",
      style: {
        "float": 'right',
        height: '0px',
        position: 'relative',
        bottom: '44px'
      }
    }, /*#__PURE__*/React__default.createElement(reactChatEngine.Button, {
      theme: "danger",
      icon: "delete",
      onClick: function onClick() {
        return _this2.onRemovePerson();
      }
    })));
  };

  return Person;
}(React.Component);

var Option = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Option, _React$Component);

  function Option() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      focused: false
    };
    return _this;
  }

  var _proto = Option.prototype;

  _proto.render = function render() {
    var _this2 = this;

    var _this$props$person = this.props.person,
        avatar = _this$props$person.avatar,
        username = _this$props$person.username;
    return /*#__PURE__*/React__default.createElement("div", {
      onMouseEnter: function onMouseEnter() {
        return _this2.setState({
          focused: true
        });
      },
      onMouseLeave: function onMouseLeave() {
        return _this2.setState({
          focused: false
        });
      },
      onClick: function onClick() {
        return _this2.props.onClick && _this2.props.onClick();
      },
      style: _extends({}, styles$3.option, {
        backgroundColor: this.state.focused ? '#f5f5f5' : 'white'
      })
    }, /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(reactChatEngine.Avatar, {
      username: username,
      avatar: avatar
    })), /*#__PURE__*/React__default.createElement("div", {
      style: {
        display: 'flex',
        padding: '12px 4px'
      }
    }, this.props.person.username));
  };

  return Option;
}(React__default.Component);
var styles$3 = {
  option: {
    padding: '4px 16px',
    cursor: 'pointer',
    fontSize: '15px',
    display: 'flex'
  }
};

var PersonForm = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(PersonForm, _React$Component);

  function PersonForm() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      value: '',
      others: []
    };
    return _this;
  }

  var _proto = PersonForm.prototype;

  _proto.handleChange = function handleChange(value) {
    this.setState({
      value: value
    });
  };

  _proto.addPerson = function addPerson(name) {
    var _this2 = this;

    reactChatEngine.addPerson(this.props.creds, this.props.chat.id, name, function () {
      _this2.setState({
        value: ''
      });

      _this2.getOthers();
    });
  };

  _proto.getOthers = function getOthers() {
    var _this3 = this;

    reactChatEngine.getOtherPeople(this.props.creds, this.props.chat.id, function (id, others) {
      return _this3.setState({
        others: others
      });
    }, function () {});
  };

  _proto.renderOption = function renderOption(option) {
    var _this4 = this;

    return /*#__PURE__*/React__default.createElement(Option, {
      person: option,
      onClick: function onClick() {
        return _this4.addPerson(option.username);
      }
    });
  };

  _proto.render = function render() {
    var _this5 = this;

    return /*#__PURE__*/React__default.createElement("div", {
      style: {
        marginBottom: '12px'
      }
    }, /*#__PURE__*/React__default.createElement(reactChatEngine.AutoCompleteInput, {
      style: {
        width: '100%'
      },
      label: "Type a username",
      value: this.state.value,
      options: this.state.others,
      onFocus: function onFocus() {
        return _this5.getOthers();
      },
      handleChange: function handleChange(value) {
        return _this5.handleChange(value);
      },
      renderOption: function renderOption(option) {
        return _this5.renderOption(option);
      }
    }));
  };

  return PersonForm;
}(React__default.Component);

var PeopleList = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(PeopleList, _React$Component);

  function PeopleList() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      collapsed: false,
      hovered: false
    };
    return _this;
  }

  var _proto = PeopleList.prototype;

  _proto.renderChatPeople = function renderChatPeople(people, chat) {
    var _this2 = this;

    return people.map(function (chatPerson, index) {
      return /*#__PURE__*/React__default.createElement(Person, {
        key: "person_" + index,
        person: chatPerson.person,
        creds: _this2.props,
        chat: chat
      });
    });
  };

  _proto.render = function render() {
    var _this3 = this;

    var _this$props = this.props,
        chats = _this$props.chats,
        activeChat = _this$props.activeChat;

    if (!chats || !activeChat || !chats[activeChat] || chats[activeChat].is_direct_chat) {
      return /*#__PURE__*/React__default.createElement("div", null);
    }

    var chat = chats[activeChat];
    return /*#__PURE__*/React__default.createElement("div", {
      style: {
        borderTop: '1px solid #f0f0f0'
      }
    }, /*#__PURE__*/React__default.createElement("div", {
      onMouseEnter: function onMouseEnter() {
        return _this3.setState({
          hovered: true
        });
      },
      onMouseLeave: function onMouseLeave() {
        return _this3.setState({
          hovered: false
        });
      },
      onClick: function onClick() {
        return _this3.setState({
          collapsed: !_this3.state.collapsed
        });
      },
      style: this.state.hovered ? {
        backgroundColor: '#f0f0f0',
        cursor: 'pointer'
      } : {},
      className: "ce-section-title-container ce-person-title-container"
    }, /*#__PURE__*/React__default.createElement("div", {
      className: "ce-section-title ce-people-title",
      style: {
        fontSize: '17px',
        padding: '12px',
        fontWeight: '600'
      }
    }, "People"), this.state.collapsed ? /*#__PURE__*/React__default.createElement(icons.LeftOutlined, {
      style: styles$4.collapseIcon
    }) : /*#__PURE__*/React__default.createElement(icons.DownOutlined, {
      style: styles$4.collapseIcon
    })), !this.state.collapsed && /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("div", {
      style: {
        height: '12px'
      }
    }), this.renderChatPeople(chat.people, chat), /*#__PURE__*/React__default.createElement("div", {
      style: {
        height: '12px'
      }
    }), this.props && chat && this.props.userName === chat.admin.username && /*#__PURE__*/React__default.createElement(PersonForm, {
      creds: this.props,
      chat: chat
    })));
  };

  return PeopleList;
}(React__default.Component);
var styles$4 = {
  collapseIcon: {
    "float": 'right',
    position: 'relative',
    bottom: '30px',
    right: '12px'
  }
};

var Thumbnail = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Thumbnail, _React$Component);

  function Thumbnail() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Thumbnail.prototype;

  _proto.render = function render() {
    var attachment = this.props.attachment;

    if (!attachment) {
      return /*#__PURE__*/React__default.createElement("div", null);
    }

    return /*#__PURE__*/React__default.createElement("div", {
      style: styles$5.container,
      className: "ce-photo-thumbnail"
    }, /*#__PURE__*/React__default.createElement("div", {
      style: {
        paddingTop: '100%'
      }
    }), /*#__PURE__*/React__default.createElement("img", {
      alt: attachment.id,
      style: styles$5.image,
      src: attachment.file,
      className: "ce-photo-img",
      id: "image-" + attachment.id
    }));
  };

  return Thumbnail;
}(React__default.Component);
var styles$5 = {
  container: {
    position: 'relative',
    width: 'calc(33% - 8px)',
    border: '1px solid white',
    display: 'inline-block',
    cursor: 'pointer'
  },
  image: {
    top: '0px',
    width: '100%',
    height: '100%',
    position: 'absolute',
    objectFit: 'cover'
  }
};

var Photos = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Photos, _React$Component);

  function Photos() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      collapsed: true,
      hovered: false
    };
    return _this;
  }

  var _proto = Photos.prototype;

  _proto.renderPhotos = function renderPhotos(attachments) {
    return attachments.map(function (attachment, index) {
      return /*#__PURE__*/React__default.createElement(Thumbnail, {
        key: "person_" + index,
        attachment: attachment
      });
    });
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props = this.props,
        chats = _this$props.chats,
        activeChat = _this$props.activeChat;

    if (!chats || !activeChat || !chats[activeChat]) {
      return /*#__PURE__*/React__default.createElement("div", null);
    }

    var chat = chats[activeChat];
    return /*#__PURE__*/React__default.createElement("div", {
      style: {
        borderTop: '1px solid #f0f0f0'
      },
      className: "ce-photo-section"
    }, /*#__PURE__*/React__default.createElement("div", {
      onMouseEnter: function onMouseEnter() {
        return _this2.setState({
          hovered: true
        });
      },
      onMouseLeave: function onMouseLeave() {
        return _this2.setState({
          hovered: false
        });
      },
      onClick: function onClick() {
        return _this2.setState({
          collapsed: !_this2.state.collapsed
        });
      },
      style: this.state.hovered ? {
        backgroundColor: '#f0f0f0',
        cursor: 'pointer'
      } : {},
      className: "ce-section-title-container ce-photo-title-container"
    }, /*#__PURE__*/React__default.createElement("div", {
      className: "ce-section-title ce-photo-title",
      style: {
        fontSize: '17px',
        padding: '12px',
        fontWeight: '600'
      }
    }, "Photos"), this.state.collapsed ? /*#__PURE__*/React__default.createElement(icons.LeftOutlined, {
      style: styles$6.collapseIcon
    }) : /*#__PURE__*/React__default.createElement(icons.DownOutlined, {
      style: styles$6.collapseIcon
    })), !this.state.collapsed && /*#__PURE__*/React__default.createElement("div", {
      className: "ce-photo-feed"
    }, /*#__PURE__*/React__default.createElement("div", {
      style: {
        height: '12px'
      }
    }), this.renderPhotos(chat.attachments)));
  };

  return Photos;
}(React__default.Component);
var styles$6 = {
  collapseIcon: {
    "float": 'right',
    position: 'relative',
    bottom: '30px',
    right: '12px'
  }
};

var Options = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Options, _React$Component);

  function Options() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      collapsed: true,
      hovered: false
    };
    return _this;
  }

  var _proto = Options.prototype;

  _proto.render = function render() {
    var _this2 = this;

    var _this$props = this.props,
        chats = _this$props.chats,
        activeChat = _this$props.activeChat;

    if (!chats || !activeChat || !chats[activeChat]) {
      return /*#__PURE__*/React__default.createElement("div", null);
    }

    var chat = chats[activeChat];
    return /*#__PURE__*/React__default.createElement("div", {
      style: {
        borderTop: '1px solid #f0f0f0'
      }
    }, /*#__PURE__*/React__default.createElement("div", {
      onMouseEnter: function onMouseEnter() {
        return _this2.setState({
          hovered: true
        });
      },
      onMouseLeave: function onMouseLeave() {
        return _this2.setState({
          hovered: false
        });
      },
      onClick: function onClick() {
        return _this2.setState({
          collapsed: !_this2.state.collapsed
        });
      },
      style: this.state.hovered ? {
        backgroundColor: '#f0f0f0',
        cursor: 'pointer'
      } : {}
    }, /*#__PURE__*/React__default.createElement("div", {
      style: {
        fontSize: '17px',
        padding: '12px',
        fontWeight: '600'
      }
    }, "Options"), this.state.collapsed ? /*#__PURE__*/React__default.createElement(icons.LeftOutlined, {
      style: styles$7.collapseIcon
    }) : /*#__PURE__*/React__default.createElement(icons.DownOutlined, {
      style: styles$7.collapseIcon
    })), !this.state.collapsed && /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("div", {
      style: {
        height: '12px'
      }
    }), /*#__PURE__*/React__default.createElement(reactChatEngine.Button, {
      value: "Delete",
      theme: "danger",
      icon: "delete",
      onClick: function onClick() {
        return reactChatEngine.deleteChat(_this2.props, chat.id, function (data) {});
      },
      style: {
        width: '100%',
        marginBottom: '12px'
      }
    })));
  };

  return Options;
}(React__default.Component);
var styles$7 = {
  collapseIcon: {
    "float": 'right',
    position: 'relative',
    bottom: '30px',
    right: '12px'
  }
};

var NewMessageForm = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(NewMessageForm, _React$Component);

  function NewMessageForm() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      activeChat: null,
      value: ''
    };
    return _this;
  }

  var _proto = NewMessageForm.prototype;

  _proto.handleChange = function handleChange(event) {
    this.setState({
      value: event.target.value
    });
  };

  _proto.handleSubmit = function handleSubmit(event) {
    event.preventDefault();
    reactChatEngine.editChat(this.props.creds, this.props.chat.id, {
      title: this.state.value
    }, function (data) {});
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    if (this.props.chat.title !== this.state.value && this.state.activeChat !== this.props.chat.id) {
      this.setState({
        value: this.props.chat.title,
        activeChat: this.props.chat.id
      });
    }
  };

  _proto.render = function render() {
    return /*#__PURE__*/React__default.createElement("form", {
      onSubmit: this.handleSubmit.bind(this),
      className: "ce-chat-title-form"
    }, /*#__PURE__*/React__default.createElement(reactChatEngine.TextInput, {
      label: "Rename this Chat",
      value: this.state.value,
      "default": this.props.chat.title,
      handleChange: this.handleChange.bind(this),
      style: {
        fontSize: '16px',
        fontWeight: '600',
        textAlign: 'center',
        border: '0px solid white',
        width: '100%'
      }
    }));
  };

  return NewMessageForm;
}(React__default.Component);

var ChatSettingsTop = /*#__PURE__*/function (_Component) {
  _inheritsLoose(ChatSettingsTop, _Component);

  function ChatSettingsTop() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = ChatSettingsTop.prototype;

  _proto.renderOnePerson = function renderOnePerson(people) {
    return /*#__PURE__*/React__default.createElement("div", {
      style: {
        width: '100%',
        paddingTop: '14px'
      }
    }, /*#__PURE__*/React__default.createElement("div", {
      style: {
        "float": 'left',
        position: 'relative',
        left: 'calc(50% - 22px)'
      }
    }, /*#__PURE__*/React__default.createElement(reactChatEngine.Avatar, {
      show_online: false,
      username: people[0].person.username,
      avatar: people[0].person.avatar
    })));
  };

  _proto.renderTwoPeople = function renderTwoPeople(people) {
    return /*#__PURE__*/React__default.createElement("div", {
      style: {
        width: '100%',
        paddingTop: '14px'
      }
    }, /*#__PURE__*/React__default.createElement("div", {
      style: {
        "float": 'left',
        position: 'relative',
        left: 'calc(50% - 22px - 15px)'
      }
    }, /*#__PURE__*/React__default.createElement(reactChatEngine.Avatar, {
      show_online: false,
      username: people[0].person.username,
      avatar: people[0].person.avatar
    })), /*#__PURE__*/React__default.createElement("div", {
      style: {
        "float": 'left',
        position: 'relative',
        left: 'calc(50% - 44px - 22px + 15px)'
      }
    }, /*#__PURE__*/React__default.createElement(reactChatEngine.Avatar, {
      show_online: false,
      username: people[1].person.username,
      avatar: people[1].person.avatar
    })));
  };

  _proto.renderThreePeople = function renderThreePeople(people) {
    return /*#__PURE__*/React__default.createElement("div", {
      style: {
        width: '100%',
        paddingTop: '14px'
      }
    }, /*#__PURE__*/React__default.createElement("div", {
      style: {
        "float": 'left',
        position: 'relative',
        left: 'calc(50% - 22px - 24px)'
      }
    }, /*#__PURE__*/React__default.createElement(reactChatEngine.Avatar, {
      show_online: false,
      username: people[0].person.username,
      avatar: people[0].person.avatar
    })), /*#__PURE__*/React__default.createElement("div", {
      style: {
        "float": 'left',
        position: 'relative',
        left: 'calc(50% - 24px - 44px)'
      }
    }, /*#__PURE__*/React__default.createElement(reactChatEngine.Avatar, {
      show_online: false,
      username: people[1].person.username,
      avatar: people[1].person.avatar
    })), /*#__PURE__*/React__default.createElement("div", {
      style: {
        "float": 'left',
        position: 'relative',
        left: 'calc(50% - 22px - 44px - 44px + 24px)'
      }
    }, /*#__PURE__*/React__default.createElement(reactChatEngine.Avatar, {
      show_online: false,
      username: people[2].person.username,
      avatar: people[2].person.avatar
    })));
  };

  _proto.getOtherPerson = function getOtherPerson(people) {
    var _this = this;

    return people.find(function (person) {
      return person.person.username !== _this.props.userName;
    });
  };

  _proto.render = function render() {
    var _this$props = this.props,
        chats = _this$props.chats,
        activeChat = _this$props.activeChat;

    if (!chats || !activeChat || !chats[activeChat]) {
      return /*#__PURE__*/React__default.createElement("div", null);
    }

    var chat = chats[activeChat];
    var topPeople = chat.people.slice(0, 3);
    var otherPerson = this.getOtherPerson(chat.people);
    return /*#__PURE__*/React__default.createElement("div", {
      className: "ce-chat-settings-container"
    }, /*#__PURE__*/React__default.createElement("div", {
      className: "ce-chat-avatars-row"
    }, topPeople.length === 1 && this.renderOnePerson(topPeople), chat.is_direct_chat && otherPerson && this.renderOnePerson([otherPerson]), !chat.is_direct_chat && otherPerson && topPeople.length === 2 && this.renderTwoPeople(topPeople), !chat.is_direct_chat && otherPerson && topPeople.length === 3 && this.renderThreePeople(topPeople)), chat.is_direct_chat && otherPerson ? /*#__PURE__*/React__default.createElement("div", {
      style: {
        paddingTop: '55px',
        paddingBottom: '7px',
        fontSize: '16px',
        fontWeight: '600',
        textAlign: 'center',
        border: '0px solid white',
        width: '100%'
      }
    }, otherPerson.person.username) : /*#__PURE__*/React__default.createElement(NewMessageForm, {
      chat: chat,
      creds: this.props
    }));
  };

  return ChatSettingsTop;
}(React.Component);

var ChatSettingsContainer = /*#__PURE__*/function (_Component) {
  _inheritsLoose(ChatSettingsContainer, _Component);

  function ChatSettingsContainer() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = ChatSettingsContainer.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        chats = _this$props.chats,
        activeChat = _this$props.activeChat;
    var chat = chats && chats[activeChat];
    if (!chat) return /*#__PURE__*/React__default.createElement("div", {
      style: styles$8.filler
    });
    return /*#__PURE__*/React__default.createElement("div", {
      style: styles$8.settingsContainer,
      className: "ce-settings"
    }, /*#__PURE__*/React__default.createElement("div", {
      style: {
        width: '90%',
        paddingLeft: '5%'
      },
      className: "ce-settings-container"
    }, this.props.renderChatSettingsTop ? this.props.renderChatSettingsTop(this.props, chat) : /*#__PURE__*/React__default.createElement(ChatSettingsTop, this.props), this.props.renderPeopleSettings ? this.props.renderPeopleSettings(this.props, chat) : /*#__PURE__*/React__default.createElement(PeopleList, this.props), this.props.renderPhotosSettings ? this.props.renderPhotosSettings(chat) : /*#__PURE__*/React__default.createElement(Photos, this.props), this.props && chat && this.props.userName === chat.admin.username && /*#__PURE__*/React__default.createElement("div", null, this.props.renderOptionsSettings ? this.props.renderOptionsSettings(this.props, chat) : /*#__PURE__*/React__default.createElement(Options, this.props))));
  };

  return ChatSettingsContainer;
}(React.Component);
var styles$8 = {
  settingsContainer: {
    height: '100%',
    overflow: 'scroll',
    overflowX: 'hidden',
    borderLeft: '1px solid #afafaf',
    backgroundColor: 'white'
  },
  filler: {
    display: 'flex',
    width: '90%',
    paddingLeft: '5%',
    borderLeft: '1px solid #afafaf'
  }
};

var ChatSettingsDrawer = /*#__PURE__*/function (_Component) {
  _inheritsLoose(ChatSettingsDrawer, _Component);

  function ChatSettingsDrawer() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      isOpen: false
    };
    return _this;
  }

  var _proto = ChatSettingsDrawer.prototype;

  _proto.render = function render() {
    var _this2 = this;
    return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(icons.SettingOutlined, {
      onClick: function onClick() {
        return _this2.setState({
          isOpen: true
        });
      },
      style: {
        color: 'rgb(24, 144, 255)',
        outline: 'none'
      }
    }), this.state.isOpen && /*#__PURE__*/React__default.createElement("div", {
      style: styles$9.drawerContainer
    }, /*#__PURE__*/React__default.createElement(icons.CloseOutlined, {
      style: styles$9.closeIcon,
      onClick: function onClick() {
        return _this2.setState({
          isOpen: false
        });
      }
    }), /*#__PURE__*/React__default.createElement("div", {
      style: styles$9.titleContainer
    }, /*#__PURE__*/React__default.createElement("div", {
      style: styles$9.titleText
    }, "Chat Settings")), /*#__PURE__*/React__default.createElement(ChatSettingsContainer, this.props)));
  };

  return ChatSettingsDrawer;
}(React.Component);
var styles$9 = {
  drawerContainer: {
    position: 'fixed',
    zIndex: '1',
    top: '0px',
    left: '0px',
    width: '100%',
    height: '100%',
    backgroundColor: 'white',
    textAlign: 'left'
  },
  closeIcon: {
    position: 'absolute',
    left: '28px',
    top: '32px'
  },
  titleContainer: {
    width: '100%',
    padding: '24px 0px',
    textAlign: 'center',
    color: 'rgb(24, 144, 255)'
  },
  titleText: {
    fontSize: '24px',
    fontWeight: '600'
  }
};

reactGridSystem.setConfiguration({
  maxScreenClass: 'xl',
  gutterWidth: 0
});

var ChatHeader = /*#__PURE__*/function (_Component) {
  _inheritsLoose(ChatHeader, _Component);

  function ChatHeader() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = ChatHeader.prototype;

  _proto.render = function render() {
    var _this = this;

    var _this$props = this.props,
        chats = _this$props.chats,
        activeChat = _this$props.activeChat;

    if (!chats || !activeChat || !chats[activeChat]) {
      return /*#__PURE__*/React__default.createElement("div", null);
    }

    var chat = chats[activeChat];
    var otherPerson = chat.people.find(function (person) {
      return person.person.username !== _this.props.userName;
    });
    return /*#__PURE__*/React__default.createElement(reactGridSystem.Row, {
      className: "ce-chat-title",
      style: styles$a.titleSection
    }, /*#__PURE__*/React__default.createElement(reactGridSystem.Col, {
      xs: 2,
      sm: 0,
      style: _extends({}, styles$a.mobileOptiom, {
        left: '6px'
      }),
      className: "ce-chat-list-mobile-option"
    }, /*#__PURE__*/React__default.createElement(ChatListDrawer, this.props)), /*#__PURE__*/React__default.createElement(reactGridSystem.Col, {
      xs: 8,
      sm: 12,
      style: styles$a.titleContainer,
      className: "ce-chat-title-container"
    }, /*#__PURE__*/React__default.createElement("div", {
      style: styles$a.titleText,
      className: "ce-chat-title-text"
    }, chat.is_direct_chat && otherPerson ? otherPerson.person.username : chat.title), /*#__PURE__*/React__default.createElement("div", {
      style: styles$a.subtitleText,
      className: "ce-chat-subtitle-text"
    }, chat.last_message.created && chat.last_message.created.length > 0 ? "Active " + timeSinceDate(chat.last_message.created) : 'Say hello!')), /*#__PURE__*/React__default.createElement(reactGridSystem.Col, {
      xs: 2,
      sm: 0,
      style: _extends({}, styles$a.mobileOptiom, {
        right: '6px'
      }),
      className: "ce-chat-settings-mobile-option"
    }, /*#__PURE__*/React__default.createElement(ChatSettingsDrawer, this.props)));
  };

  return ChatHeader;
}(React.Component);
var styles$a = {
  titleSection: {
    position: 'absolute',
    top: '0px',
    width: '100%',
    zIndex: '1',
    backgroundColor: 'rgb(256, 256, 256, 0.92)'
  },
  mobileOptiom: {
    width: '100%',
    top: '32px',
    textAlign: 'center',
    color: 'rgb(24, 144, 255)',
    overflow: 'hidden'
  },
  titleContainer: {
    width: '100%',
    padding: '18px 0px',
    textAlign: 'center',
    color: 'rgb(24, 144, 255)'
  },
  titleText: {
    fontSize: '24px',
    fontWeight: '600'
  },
  subtitleText: {
    fontSize: '12px'
  }
};

var AuthFail = /*#__PURE__*/function (_Component) {
  _inheritsLoose(AuthFail, _Component);

  function AuthFail() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = AuthFail.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React__default.createElement("div", {
      style: {
        height: '100%',
        textAlign: 'center'
      }
    }, /*#__PURE__*/React__default.createElement("div", {
      style: {
        width: '100%'
      }
    }, /*#__PURE__*/React__default.createElement("img", {
      style: {
        width: '40%',
        paddingTop: '25vh'
      },
      src: "https://chat-engine-assets.s3.amazonaws.com/denied.svg",
      alt: "welcome-to-chat-engine"
    })), /*#__PURE__*/React__default.createElement("div", {
      style: {
        fontSize: '18px',
        paddingTop: '24px',
        width: '75%',
        paddingLeft: '12.5%'
      }
    }, "Your credentials are incorrect. Make sure your Public Key, Username, and Password are correct at ", /*#__PURE__*/React__default.createElement("a", {
      href: "https://chatengine.io"
    }, "chatengine.io")));
  };

  return AuthFail;
}(React.Component);

var Loading = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Loading, _Component);

  function Loading() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = Loading.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React__default.createElement("div", {
      style: {
        zIndex: '1',
        bottom: '66px',
        left: 'calc(50% - 78px)',
        position: 'absolute',
        fontSize: '15px',
        padding: '10px 22px',
        color: 'white',
        backgroundColor: '#fa8c16',
        borderRadius: '1.3em'
      },
      id: "ce-connecting-popup"
    }, /*#__PURE__*/React__default.createElement(icons.SyncOutlined, {
      spin: true
    }), ' ', "Connecting");
  };

  return Loading;
}(React.Component);

var Welcome = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Welcome, _Component);

  function Welcome() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = Welcome.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React__default.createElement("div", {
      style: {
        height: '100%',
        textAlign: 'center'
      }
    }, /*#__PURE__*/React__default.createElement("div", {
      style: {
        width: '100%'
      }
    }, /*#__PURE__*/React__default.createElement("img", {
      style: {
        width: '60%',
        paddingTop: '33vh'
      },
      src: "https://chat-engine-assets.s3.amazonaws.com/welcome.svg",
      alt: "welcome-to-chat-engine"
    })), /*#__PURE__*/React__default.createElement("div", {
      style: {
        fontSize: '18px',
        paddingTop: '24px',
        width: '75%',
        paddingLeft: '12.5%'
      }
    }, "Fill out the \"New Chat\" form to get started."));
  };

  return Welcome;
}(React.Component);

var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
var suffix = ['st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'st'];

var DatePartition = /*#__PURE__*/function (_Component) {
  _inheritsLoose(DatePartition, _Component);

  function DatePartition() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = DatePartition.prototype;

  _proto.getDate = function getDate(date) {
    return date ? date.substr(0, 10) : null;
  };

  _proto.formatDate = function formatDate(date_time) {
    if (!date_time) return '';
    var year = date_time.substr(0, 4);
    var month = months[parseInt(date_time.substr(5, 2)) - 1];
    var day = date_time.substr(8, 2);
    var dayDuffix = suffix[parseInt(date_time.substr(8, 2)) - 1];
    var time = date_time.substr(11, 5);
    var timeSuffix = '';

    if (parseInt(time.substr(0, 2)) >= 12) {
      if (parseInt(time.substr(0, 2)) > 12) {
        time = String(parseInt(time.substr(0, 2)) - 12) + ':' + time.substr(3, 2);
      }

      timeSuffix = 'PM';
    } else {
      timeSuffix = 'AM';
    }

    return time + timeSuffix + ', ' + month + ' ' + day + dayDuffix + ', ' + year;
  };

  _proto.render = function render() {
    var _this$props = this.props,
        lastCreated = _this$props.lastCreated,
        created = _this$props.created;
    var lastDate = this.getDate(lastCreated);
    var thisDate = this.getDate(created);

    if (lastCreated && lastDate === thisDate) {
      return /*#__PURE__*/React__default.createElement("div", null);
    }

    return /*#__PURE__*/React__default.createElement("div", {
      style: styles$b.dateText,
      className: "ce-message-date-text"
    }, this.formatDate(created));
  };

  return DatePartition;
}(React.Component);
var styles$b = {
  dateText: {
    width: '100%',
    textAlign: 'center',
    paddingTop: '4px',
    paddingBottom: '10px',
    fontSize: '15px',
    color: 'rgba(0, 0, 0, .40)'
  }
};

var _loadingContainer, _thumbnail;

var Thumbnail$1 = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Thumbnail, _Component);

  function Thumbnail() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = Thumbnail.prototype;

  _proto.render = function render() {
    var attachment = this.props.attachment;

    if (!attachment) {
      return /*#__PURE__*/React__default.createElement("div", {
        style: styles$c.loadingContainer
      }, /*#__PURE__*/React__default.createElement(icons.LoadingOutlined, {
        style: {
          color: 'white',
          padding: '4px',
          fontSize: '28px'
        }
      }));
    }

    return /*#__PURE__*/React__default.createElement("img", {
      style: styles$c.thumbnail,
      src: attachment.file,
      alt: 'thumb-nail'
    });
  };

  return Thumbnail;
}(React.Component);
var styles$c = {
  loadingContainer: (_loadingContainer = {
    width: '100%',
    cursor: 'pointer',
    textAlign: 'right',
    display: 'inline-block',
    objectFit: 'cover',
    borderRadius: '0.3em',
    marginRight: '2px',
    height: '30vw'
  }, _loadingContainer["width"] = '30vw', _loadingContainer.maxHeight = '200px', _loadingContainer.maxWidth = '200px', _loadingContainer.minHeight = '100px', _loadingContainer.minWidth = '100px', _loadingContainer.backgroundColor = '#d9d9d9', _loadingContainer),
  thumbnail: (_thumbnail = {
    width: '100%',
    cursor: 'pointer',
    textAlign: 'right',
    display: 'inline',
    objectFit: 'cover',
    borderRadius: '0.3em',
    paddingRight: '2px',
    height: '30vw'
  }, _thumbnail["width"] = '30vw', _thumbnail.maxHeight = '200px', _thumbnail.maxWidth = '200px', _thumbnail.minHeight = '100px', _thumbnail.minWidth = '100px', _thumbnail)
};

var colors = ['#D64045', '#5B3000', '#00CC99', '#467599', '#1D3354', '#8F250C', '#6153CC', '#961D4E', '#A29F15', '#0CAADC', '#FF5154', '#FA7921', '#688E26', '#550527', '#A10702', '#FF1053', '#6C6EA0', '#100B00'];

function stringToNumber(str) {
  var sum = 0;

  for (var i = 0; i < str.length; i++) {
    sum = sum + str.charCodeAt(i) * i - 97;
  }

  return sum;
}

function stringToColor(str) {
  if (!str) {
    return 'black';
  } else {
    return colors[stringToNumber(str) % colors.length];
  }
}

var Dot = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Dot, _Component);

  function Dot() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      avatar: ''
    };
    return _this;
  }

  var _proto = Dot.prototype;

  _proto.updateImg = function updateImg() {
    var avatar = this.props.avatar;
    avatar = avatar && avatar !== null ? avatar : '';

    if (avatar.split('?')[0] !== this.state.avatar.split('?')[0]) {
      this.setState({
        avatar: avatar
      });
    }
  };

  _proto.componentDidMount = function componentDidMount() {
    this.updateImg();
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.updateImg();
  };

  _proto.render = function render() {
    var username = this.props.username;
    var color = stringToColor(username);
    var customStyle = this.props.style ? this.props.style : {};
    return /*#__PURE__*/React__default.createElement("div", {
      className: "ce-avatar-dot",
      style: _extends({}, styles$d.dot, customStyle, {
        backgroundColor: this.state.avatar ? 'white' : color,
        backgroundImage: this.state.avatar && "url(" + this.state.avatar + ")",
        backgroundRepeat: 'no-repeat',
        backgroundPosition: 'center',
        backgroundSize: '14px'
      })
    });
  };

  return Dot;
}(React.Component);
var styles$d = {
  dot: {
    width: '13px',
    height: '13px',
    borderRadius: '13px',
    textAlign: 'center'
  }
};

reactGridSystem.setConfiguration({
  maxScreenClass: 'xl'
});

var Message = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Message, _Component);

  function Message() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      selected: false
    };
    return _this;
  }

  var _proto = Message.prototype;

  _proto.renderReads = function renderReads() {
    var _this$props = this.props,
        chat = _this$props.chat,
        message = _this$props.message;

    if (!chat) {
      return /*#__PURE__*/React__default.createElement("div", null);
    }

    return chat.people.map(function (chatPerson, index) {
      if (message.id === chatPerson.last_read) {
        return /*#__PURE__*/React__default.createElement(Dot, {
          key: "read_" + index,
          avatar: chatPerson.person.avatar,
          username: chatPerson.person.username,
          style: {
            "float": 'right',
            marginLeft: '4px'
          }
        });
      }

      return /*#__PURE__*/React__default.createElement("div", {
        key: "read_" + index
      });
    });
  };

  _proto.renderAttachments = function renderAttachments() {
    var message = this.props.message;
    var attachments = message && message.attachments ? message.attachments : [];
    return attachments.map(function (attachment, index) {
      return /*#__PURE__*/React__default.createElement(Thumbnail$1, {
        attachment: attachment,
        key: "attachment_" + index
      });
    });
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props2 = this.props,
        lastMessage = _this$props2.lastMessage,
        message = _this$props2.message,
        nextMessage = _this$props2.nextMessage;

    if (!message) {
      return /*#__PURE__*/React__default.createElement("div", null);
    }

    var attachments = message && message.attachments && message.attachments;
    var topRightRadius = !lastMessage || lastMessage.sender_username !== message.sender_username ? '1.3em' : '0.3em';
    var bottomRightRadius = !nextMessage || nextMessage.sender_username !== message.sender_username ? '1.3em' : '0.3em';
    var borderRadius = "1.3em " + topRightRadius + " " + bottomRightRadius + " 1.3em";
    var paddingBottom = !nextMessage || nextMessage.sender_username !== message.sender_username ? '12px' : '2px';
    return /*#__PURE__*/React__default.createElement("div", {
      className: "ce-message-row ce-my-message",
      onMouseEnter: function onMouseEnter() {
        return _this2.setState({
          selected: true
        });
      },
      onMouseLeave: function onMouseLeave() {
        return _this2.setState({
          selected: false
        });
      },
      style: {
        width: '100%',
        textAlign: 'right',
        paddingBottom: paddingBottom
      }
    }, /*#__PURE__*/React__default.createElement("div", {
      style: {
        display: 'auto'
      },
      className: "ce-my-message-attachments-container"
    }, this.renderAttachments()), /*#__PURE__*/React__default.createElement(reactGridSystem.Row, {
      style: {
        paddingRight: '2px'
      },
      className: "ce-message-bubble-row ce-my-message-bubble-row"
    }, /*#__PURE__*/React__default.createElement(reactGridSystem.Col, {
      xs: 1,
      sm: 2,
      md: 3
    }), /*#__PURE__*/React__default.createElement(reactGridSystem.Col, {
      xs: 11,
      sm: 10,
      md: 9
    }, !attachments || message.text && /*#__PURE__*/React__default.createElement("div", {
      className: "ce-message-bubble ce-my-message-bubble",
      style: _extends({}, styles$e.myMessage, {
        borderRadius: borderRadius
      })
    }, message.text)), /*#__PURE__*/React__default.createElement(reactGridSystem.Col, {
      xs: 1,
      sm: 2,
      md: 3
    }), /*#__PURE__*/React__default.createElement(reactGridSystem.Col, {
      xs: 12,
      className: "ce-reads-row ce-my-reads-row"
    }, this.renderReads())));
  };

  return Message;
}(React.Component);
var styles$e = {
  myMessage: {
    color: 'white',
    cursor: 'pointer',
    "float": 'right',
    textAlign: 'left',
    padding: '12px',
    fontSize: '15px',
    whiteSpace: 'pre-line',
    backgroundColor: 'rgb(24, 144, 255)'
  }
};

reactGridSystem.setConfiguration({
  maxScreenClass: 'xl'
});

var TheirMessage = /*#__PURE__*/function (_Component) {
  _inheritsLoose(TheirMessage, _Component);

  function TheirMessage() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      selected: false
    };
    return _this;
  }

  var _proto = TheirMessage.prototype;

  _proto.renderReads = function renderReads() {
    var _this$props = this.props,
        chat = _this$props.chat,
        message = _this$props.message;

    if (!chat) {
      return /*#__PURE__*/React__default.createElement("div", null);
    }

    return chat.people.map(function (person, index) {
      if (message.id === person.last_read) {
        return /*#__PURE__*/React__default.createElement(reactChatEngine.Dot, {
          key: "read_" + index,
          avatar: person.person.avatar,
          username: person.person.username,
          style: {
            "float": 'left',
            marginLeft: '4px'
          }
        });
      }

      return /*#__PURE__*/React__default.createElement("div", {
        key: "read_" + index
      });
    });
  };

  _proto.renderAttachments = function renderAttachments() {
    var message = this.props.message;
    var attachments = message && message.attachments ? this.props.message.attachments : [];
    return attachments.map(function (attachment, index) {
      return /*#__PURE__*/React__default.createElement(Thumbnail$1, {
        attachment: attachment,
        key: "attachment_" + index
      });
    });
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props2 = this.props,
        lastMessage = _this$props2.lastMessage,
        message = _this$props2.message,
        nextMessage = _this$props2.nextMessage;

    if (!message) {
      return /*#__PURE__*/React__default.createElement("div", null);
    }

    var attachments = message && message.attachments && message.attachments;
    var topLeftRadius = !lastMessage || lastMessage.sender_username !== message.sender_username ? '1.3em' : '0.3em';
    var bottomLeftRadius = !nextMessage || nextMessage.sender_username !== message.sender_username ? '1.3em' : '0.3em';
    var borderRadius = topLeftRadius + " 1.3em 1.3em " + bottomLeftRadius;
    var paddingBottom = !nextMessage || nextMessage.sender_username !== message.sender_username ? '12px' : '2px';
    return /*#__PURE__*/React__default.createElement("div", {
      style: {
        width: '100%',
        paddingBottom: paddingBottom
      },
      className: "ce-message-row ce-their-message"
    }, (!lastMessage || lastMessage.sender_username !== message.sender_username) && /*#__PURE__*/React__default.createElement("div", {
      style: styles$f.nameText,
      className: "ce-their-message-sender"
    }, message.sender_username), /*#__PURE__*/React__default.createElement(reactGridSystem.Row, {
      style: {
        paddingLeft: '2px'
      },
      className: "ce-their-message-row"
    }, /*#__PURE__*/React__default.createElement(reactGridSystem.Col, {
      xs: 11,
      sm: 10,
      md: 9
    }, /*#__PURE__*/React__default.createElement("div", {
      style: {
        height: '0px'
      },
      className: "ce-their-message-avatar"
    }, (!nextMessage || nextMessage.sender_username !== message.sender_username) && /*#__PURE__*/React__default.createElement(reactChatEngine.Avatar, {
      show_online: false,
      username: message.sender_username,
      avatar: message.sender && message.sender.avatar
    })), /*#__PURE__*/React__default.createElement("div", {
      style: {
        display: 'auto',
        paddingLeft: '50px'
      },
      className: "ce-their-message-attachments-container"
    }, this.renderAttachments()), !attachments || message.text && /*#__PURE__*/React__default.createElement("div", {
      style: {
        paddingLeft: '48px'
      }
    }, /*#__PURE__*/React__default.createElement("div", {
      className: "ce-message-bubble ce-their-message-bubble",
      onMouseEnter: function onMouseEnter() {
        return _this2.setState({
          selected: true
        });
      },
      onMouseLeave: function onMouseLeave() {
        return _this2.setState({
          selected: false
        });
      },
      style: _extends({}, styles$f.theirMessage, {
        borderRadius: borderRadius
      })
    }, message.text))), /*#__PURE__*/React__default.createElement(reactGridSystem.Col, {
      xs: 9,
      style: {
        marginLeft: '48px'
      },
      className: "ce-reads-row ce-their-reads-row"
    }, this.renderReads())));
  };

  return TheirMessage;
}(React.Component);
var styles$f = {
  theirMessage: {
    cusor: 'auto',
    color: 'black',
    "float": 'left',
    padding: '12px',
    fontSize: '15px',
    whiteSpace: 'pre-line',
    backgroundColor: '#f1f0f0'
  },
  nameText: {
    paddingLeft: '62px',
    paddingBottom: '2px',
    color: 'rgba(0, 0, 0, .40)',
    fontSize: '15px'
  }
};

reactGridSystem.setConfiguration({
  maxScreenClass: 'xl'
});

var SendingMessage = /*#__PURE__*/function (_Component) {
  _inheritsLoose(SendingMessage, _Component);

  function SendingMessage() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      selected: false
    };
    return _this;
  }

  var _proto = SendingMessage.prototype;

  _proto.renderReads = function renderReads() {
    var _this$props = this.props,
        chat = _this$props.chat,
        message = _this$props.message;

    if (!chat) {
      return /*#__PURE__*/React__default.createElement("div", null);
    }

    return chat.people.map(function (chatPerson, index) {
      if (message.id === chatPerson.last_read) {
        return /*#__PURE__*/React__default.createElement(Dot, {
          key: "read_" + index,
          avatar: chatPerson.person.avatar,
          username: chatPerson.person.username,
          style: {
            "float": 'right',
            marginLeft: '4px'
          }
        });
      }

      return /*#__PURE__*/React__default.createElement("div", {
        key: "read_" + index
      });
    });
  };

  _proto.renderAttachments = function renderAttachments(attachments) {
    return attachments.map(function (a, index) {
      return /*#__PURE__*/React__default.createElement(Thumbnail$1, {
        key: "sending-file-" + index
      });
    });
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props2 = this.props,
        lastMessage = _this$props2.lastMessage,
        message = _this$props2.message,
        nextMessage = _this$props2.nextMessage;

    if (!message) {
      return /*#__PURE__*/React__default.createElement("div", null);
    }

    var attachments = message && message.attachments ? message.attachments : [];
    var topRightRadius = !lastMessage || lastMessage.sender_username !== message.sender_username ? '1.3em' : '0.3em';
    var bottomRightRadius = !nextMessage || nextMessage.sender_username !== message.sender_username ? '1.3em' : '0.3em';
    var borderRadius = "1.3em " + topRightRadius + " " + bottomRightRadius + " 1.3em";
    var paddingBottom = !nextMessage || nextMessage.sender_username !== message.sender_username ? '12px' : '2px';
    return /*#__PURE__*/React__default.createElement("div", {
      className: "ce-message-row ce-my-message ce-my-message-sending",
      onMouseEnter: function onMouseEnter() {
        return _this2.setState({
          selected: true
        });
      },
      onMouseLeave: function onMouseLeave() {
        return _this2.setState({
          selected: false
        });
      },
      style: {
        width: '100%',
        textAlign: 'right',
        paddingBottom: paddingBottom
      }
    }, /*#__PURE__*/React__default.createElement("div", {
      style: {
        display: 'auto'
      },
      className: "ce-my-message-attachments-container"
    }, this.renderAttachments(attachments)), /*#__PURE__*/React__default.createElement(reactGridSystem.Row, {
      style: {
        paddingRight: '2px'
      },
      className: "ce-message-bubble-row ce-my-message-bubble-row ce-my-message-sending-row"
    }, /*#__PURE__*/React__default.createElement(reactGridSystem.Col, {
      xs: 1,
      sm: 2,
      md: 3
    }), /*#__PURE__*/React__default.createElement(reactGridSystem.Col, {
      xs: 11,
      sm: 10,
      md: 9
    }, message.text && /*#__PURE__*/React__default.createElement("div", {
      className: "ce-message-bubble ce-my-message-bubble",
      style: _extends({}, styles$g.myMessage, {
        borderRadius: borderRadius
      })
    }, message.text)), /*#__PURE__*/React__default.createElement(reactGridSystem.Col, {
      xs: 1,
      sm: 2,
      md: 3
    })));
  };

  return SendingMessage;
}(React.Component);
var styles$g = {
  myMessage: {
    color: 'white',
    cursor: 'pointer',
    "float": 'right',
    textAlign: 'left',
    padding: '12px',
    fontSize: '15px',
    whiteSpace: 'pre-line',
    backgroundColor: '#40a9ff'
  }
};

var Message$1 = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Message$1, _Component);

  function Message$1() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      selected: false
    };
    return _this;
  }

  var _proto = Message$1.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        lastMessage = _this$props.lastMessage,
        message = _this$props.message,
        sending = _this$props.sending,
        nextMessage = _this$props.nextMessage;
    var _this$props2 = this.props,
        chats = _this$props2.chats,
        activeChat = _this$props2.activeChat;

    if (!message || !chats || !activeChat || !chats[activeChat]) {
      return /*#__PURE__*/React__default.createElement("div", null);
    }

    var chat = chats[activeChat];
    return /*#__PURE__*/React__default.createElement("div", {
      className: "ce-message-and-date"
    }, !sending && /*#__PURE__*/React__default.createElement(DatePartition, {
      lastCreated: lastMessage ? lastMessage.created : null,
      created: message.created
    }), sending ? /*#__PURE__*/React__default.createElement(SendingMessage, {
      chat: chat,
      creds: this.props,
      lastMessage: lastMessage,
      message: message,
      nextMessage: nextMessage
    }) : /*#__PURE__*/React__default.createElement("div", null, !sending && message.sender_username === this.props.userName ? /*#__PURE__*/React__default.createElement(Message, {
      chat: chat,
      creds: this.props,
      lastMessage: lastMessage,
      message: message,
      nextMessage: nextMessage
    }) : /*#__PURE__*/React__default.createElement(TheirMessage, {
      chat: chat,
      creds: this.props,
      lastMessage: lastMessage,
      message: message,
      nextMessage: nextMessage
    })));
  };

  return Message$1;
}(React.Component);

var FileRow = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(FileRow, _React$Component);

  function FileRow() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      hovered: false
    };
    return _this;
  }

  var _proto = FileRow.prototype;

  _proto.render = function render() {
    var _this2 = this;

    return /*#__PURE__*/React__default.createElement("div", {
      style: {
        padding: '12px 6px',
        display: 'inline'
      },
      onMouseEnter: function onMouseEnter() {
        return _this2.setState({
          hovered: true
        });
      },
      onMouseLeave: function onMouseLeave() {
        return _this2.setState({
          hovered: false
        });
      }
    }, /*#__PURE__*/React__default.createElement("img", {
      style: styles$h.imageSquare,
      alt: this.props.file ? this.props.file.name : '',
      src: URL.createObjectURL(this.props.file)
    }), this.state.hovered && /*#__PURE__*/React__default.createElement(icons.CloseCircleTwoTone, {
      style: styles$h.closeIcon,
      onClick: function onClick() {
        return _this2.props.onRemove && _this2.props.onRemove();
      }
    }));
  };

  return FileRow;
}(React__default.Component);
var styles$h = {
  imageSquare: {
    height: '108px',
    width: '108px',
    border: '1px solid #afafaf',
    borderRadius: '8px',
    objectFit: 'cover',
    display: 'inline'
  },
  closeIcon: {
    position: 'relative',
    bottom: '91px',
    right: '20px',
    width: '0px',
    cursor: 'pointer'
  }
};

var FileRow$1 = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(FileRow$1, _React$Component);

  function FileRow$1() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = FileRow$1.prototype;

  _proto.renderFiles = function renderFiles() {
    var _this = this;

    return this.props.files.map(function (file, index) {
      return /*#__PURE__*/React__default.createElement(FileRow, {
        file: file,
        key: "thumb_" + index,
        onRemove: function onRemove() {
          return _this.props.onRemove && _this.props.onRemove(index);
        }
      });
    });
  };

  _proto.render = function render() {
    return /*#__PURE__*/React__default.createElement("div", {
      style: {
        width: 'calc(100% - 24px)',
        paddingLeft: '12px'
      }
    }, this.renderFiles());
  };

  return FileRow$1;
}(React__default.Component);

var ImagesInput = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(ImagesInput, _React$Component);

  function ImagesInput() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      hovered: false,
      files: []
    };
    return _this;
  }

  var _proto = ImagesInput.prototype;

  _proto.onSelect = function onSelect(event) {
    var files = [];
    var indexes = [].concat(Array(event.target.files.length).keys());
    indexes.map(function (i, index) {
      var file = event.target.files[index];

      if (file) {
        files.push(file);
      }
    });
    this.props.onSelectFiles && this.props.onSelectFiles(files);
  };

  _proto.render = function render() {
    var _this2 = this;

    return /*#__PURE__*/React__default.createElement("form", {
      className: "uploader",
      encType: "multipart/form-data",
      style: {
        height: '0px'
      }
    }, /*#__PURE__*/React__default.createElement("label", {
      htmlFor: "files",
      id: "upload-document-button"
    }, /*#__PURE__*/React__default.createElement(icons.PaperClipOutlined, {
      onMouseEnter: function onMouseEnter() {
        return _this2.setState({
          hovered: true
        });
      },
      onMouseLeave: function onMouseLeave() {
        return _this2.setState({
          hovered: false
        });
      },
      style: _extends({}, {
        cursor: 'pointer',
        position: 'absolute',
        bottom: '20px',
        right: '63px',
        fontSize: '18px'
      }, {
        color: this.state.hovered ? '#69c0ff' : '#1890ff'
      })
    })), /*#__PURE__*/React__default.createElement("input", {
      multiple: true,
      id: "files",
      accept: "image/x-png,image/gif,image/jpeg",
      style: {
        visibility: "hidden"
      },
      type: "file",
      onChange: function onChange(e) {
        return _this2.onSelect(e);
      }
    }));
  };

  return ImagesInput;
}(React__default.Component);

var NewMessageForm$1 = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(NewMessageForm, _React$Component);

  function NewMessageForm() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      trigger: 0,
      mod: 3,
      value: '',
      attachments: []
    };
    return _this;
  }

  var _proto = NewMessageForm.prototype;

  _proto.onRemove = function onRemove(index) {
    var attachments = this.state.attachments;
    attachments.splice(index, 1);
    this.setState({
      attachments: attachments
    });
  };

  _proto.handleChange = function handleChange(event) {
    this.setState({
      value: event.target.value,
      trigger: (this.state.trigger + 1) % this.state.mod
    });

    if (this.state.trigger === 1) {
      reactChatEngine.isTyping(this.props, this.props.activeChat);
    }
  };

  _proto.handleSubmit = function handleSubmit(event) {
    event.preventDefault();
    var attachments = this.state.attachments;
    var text = this.state.value.trim();
    var custom_json = {
      sender_id: Date.now().toString()
    };
    var sender_username = this.props.userName;
    var data = {
      text: text,
      attachments: attachments,
      custom_json: custom_json,
      sender_username: sender_username,
      chat: this.props.activeChat
    };

    if (text.length > 0 || attachments.length > 0) {
      reactChatEngine.sendMessage(this.props, this.props.activeChat, data, function (data) {});
    }

    this.props.sendingMessage && this.props.sendingMessage(data);
    this.setState({
      value: '',
      attachments: []
    });
  };

  _proto.render = function render() {
    var _this2 = this;

    return /*#__PURE__*/React__default.createElement("div", {
      id: "msg-form-container",
      style: styles$i.NewMessageFormContainer,
      className: "ce-message-form-container"
    }, /*#__PURE__*/React__default.createElement(FileRow$1, {
      files: this.state.attachments,
      onRemove: function onRemove(i) {
        return _this2.onRemove(i);
      }
    }), /*#__PURE__*/React__default.createElement(ImagesInput, {
      onSelectFiles: function onSelectFiles(attachments) {
        return _this2.setState({
          attachments: attachments
        });
      }
    }), /*#__PURE__*/React__default.createElement("form", {
      onSubmit: this.handleSubmit.bind(this),
      className: "ce-message-form"
    }, /*#__PURE__*/React__default.createElement("div", {
      style: styles$i.inputContainer,
      className: "ce-message-input-form"
    }, /*#__PURE__*/React__default.createElement(reactChatEngine.TextAreaInput, {
      value: this.state.value,
      label: "Send a message...",
      handleChange: this.handleChange.bind(this),
      onSubmit: this.handleSubmit.bind(this)
    }), /*#__PURE__*/React__default.createElement(reactChatEngine.Button, {
      icon: "send",
      type: "submit",
      style: {
        position: 'absolute',
        bottom: '10px',
        right: '6px'
      }
    }))));
  };

  return NewMessageForm;
}(React__default.Component);
var styles$i = {
  NewMessageFormContainer: {
    position: 'absolute',
    bottom: '0px',
    width: '100%',
    backgroundColor: 'white'
  },
  inputContainer: {
    minHeight: '36px',
    paddingTop: '10px',
    paddingBottom: '6px'
  }
};

var ChatFeed = /*#__PURE__*/function (_Component) {
  _inheritsLoose(ChatFeed, _Component);

  function ChatFeed() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = ChatFeed.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React__default.createElement("div", {
      style: {
        color: stringToColor(this.props.username),
        padding: '2px',
        paddingLeft: '12px'
      }
    }, this.props.username + " is typing...");
  };

  return ChatFeed;
}(React.Component);

var ChatFeed$1 = /*#__PURE__*/function (_Component) {
  _inheritsLoose(ChatFeed$1, _Component);

  function ChatFeed$1() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      duration: 0
    };
    return _this;
  }

  var _proto = ChatFeed$1.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    setTimeout(function () {
      _this2.setState({
        duration: 100
      });
    }, 3000);
  };

  _proto.renderTypers = function renderTypers() {
    var _this$props = this.props,
        typingData = _this$props.typingData,
        activeChat = _this$props.activeChat;
    var typers = typingData && typingData[activeChat] ? typingData[activeChat] : [];

    if (this.props.renderIsTyping) {
      return this.props.renderIsTyping(typers);
    }

    return typers.map(function (username, index) {
      return /*#__PURE__*/React__default.createElement(ChatFeed, {
        key: "typer_" + index,
        username: username
      });
    });
  };

  _proto.renderMessages = function renderMessages() {
    var _this3 = this;

    var _this$props2 = this.props,
        messages = _this$props2.messages,
        chats = _this$props2.chats,
        activeChat = _this$props2.activeChat;
    var chat = chats && chats[activeChat];
    var keys = Object.keys(messages);
    return keys.map(function (key, index) {
      var message = messages[key];
      var lastMessageKey = index === 0 ? null : keys[index - 1];
      var nextMessageKey = index === keys.length - 1 ? null : keys[index + 1];

      if (_this3.props.renderMessageBubble) {
        return /*#__PURE__*/React__default.createElement("div", {
          key: "message_" + index
        }, _this3.props.renderMessageBubble(_this3.props, chat, messages[lastMessageKey], message, messages[nextMessageKey]));
      }

      return /*#__PURE__*/React__default.createElement(Message$1, _extends({
        key: "message_" + index
      }, _this3.props, {
        chat: chat,
        message: message,
        lastMessage: messages[lastMessageKey],
        nextMessage: messages[nextMessageKey]
      }));
    });
  };

  _proto.renderSendingMessages = function renderSendingMessages() {
    var _this4 = this;

    var _this$props3 = this.props,
        sendingMessages = _this$props3.sendingMessages,
        chats = _this$props3.chats,
        activeChat = _this$props3.activeChat;
    var keys = Object.keys(sendingMessages);
    var chat = chats && chats[activeChat];
    return keys.map(function (key, index) {
      var message = sendingMessages[key];
      var lastMessageKey = index === 0 ? null : keys[index - 1];
      var nextMessageKey = index === keys.length - 1 ? null : keys[index + 1];

      if (message && message.chat === _this4.props.activeChat) {
        return /*#__PURE__*/React__default.createElement(Message$1, _extends({
          sending: true,
          key: "sending-msg-" + index
        }, _this4.props, {
          chat: chat,
          message: message,
          lastMessage: sendingMessages[lastMessageKey],
          nextMessage: sendingMessages[nextMessageKey]
        }));
      }
    });
  };

  _proto.scrollToBottom = function scrollToBottom() {
    reactScroll.animateScroll.scrollToBottom({
      duration: this.state.duration,
      containerId: "ce-feed-container"
    });
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    if (!_.isEmpty(this.props.messages)) {
      this.scrollToBottom();
    }
  };

  _proto.render = function render() {
    var _this$props4 = this.props,
        chats = _this$props4.chats,
        creds = _this$props4.creds,
        activeChat = _this$props4.activeChat;
    var chat = chats && chats[activeChat];

    if (creds === undefined) {
      return /*#__PURE__*/React__default.createElement(AuthFail, null);
    }

    if (creds && chats !== null && _.isEmpty(chats)) {
      return /*#__PURE__*/React__default.createElement(Welcome, null);
    }

    return /*#__PURE__*/React__default.createElement("div", {
      className: "ce-chat-feed",
      style: {
        display: 'flex',
        maxHeight: '100vh',
        backgroundColor: '#f0f0f0'
      }
    }, this.props.connecting && /*#__PURE__*/React__default.createElement(Loading, null), this.props.renderChatHeader ? this.props.renderChatHeader(chat) : /*#__PURE__*/React__default.createElement(ChatHeader, this.props), /*#__PURE__*/React__default.createElement("div", {
      id: "ce-feed-container",
      style: styles$j.feedContainer,
      className: "ce-chat-feed-container"
    }, /*#__PURE__*/React__default.createElement("div", {
      style: {
        height: '88px'
      },
      className: "ce-feed-container-top"
    }), this.renderMessages(), this.renderSendingMessages(), this.renderTypers(), /*#__PURE__*/React__default.createElement("div", {
      style: {
        height: '54px'
      },
      className: "ce-feed-container-bottom"
    })), this.props.renderNewMessageForm ? this.props.renderNewMessageForm(this.props, activeChat) : /*#__PURE__*/React__default.createElement(NewMessageForm$1, this.props));
  };

  return ChatFeed$1;
}(React.Component);
var styles$j = {
  feedContainer: {
    position: 'absolute',
    top: '0px',
    height: '100%',
    width: '100%',
    overflow: 'scroll',
    overflowX: 'hidden',
    backgroundColor: 'white',
    borderRight: '1px solid rgb(175, 175, 175)'
  }
};

reactGridSystem.setConfiguration({
  maxScreenClass: 'xl',
  gutterWidth: 0
});

var App = /*#__PURE__*/function (_Component) {
  _inheritsLoose(App, _Component);

  function App() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      connecting: true,
      creds: null,
      chats: null,
      messages: {},
      sendingMessages: {},
      activeChat: null,
      typingCounter: {},
      typingData: {},
      onChatClick: function onChatClick(chatId) {
        return _this.setActiveChat(chatId);
      },
      sendingMessage: function sendingMessage(chatId) {
        return _this.sendingMessage(chatId);
      }
    };
    return _this;
  }

  var _proto = App.prototype;

  _proto.sortChats = function sortChats(chats) {
    return Object.values(chats).sort(function (a, b) {
      var aDate = a.last_message.created ? new Date(a.last_message.created) : new Date(a.created);
      var bDate = b.last_message.created ? new Date(b.last_message.created) : new Date(b.created);
      return new Date(bDate) - new Date(aDate);
    });
  };

  _proto.onConnect = function onConnect(creds) {
    this.setState({
      creds: creds,
      connecting: false
    });
    getChats(creds, function () {});
    this.props.onConnect && this.props.onConnect(creds);
  };

  _proto.onFailAuth = function onFailAuth(creds) {
    this.setState({
      creds: undefined
    });
    this.props.onFailAuth && this.props.onFailAuth(creds);
  };

  _proto.setActiveChat = function setActiveChat(chatId) {
    this.setState({
      activeChat: chatId
    });
    getMessages(this.state.creds, chatId, function () {});
  };

  _proto.onGetChats = function onGetChats(chats) {
    chats = this.sortChats(chats);

    if (chats.length > 0 && this.state.activeChat === null) {
      this.setActiveChat(chats[0].id);
    }

    this.setState({
      chats: _.mapKeys(chats, 'id')
    });
    this.props.onGetChats && this.props.onGetChats(chats);
  };

  _proto.onNewChat = function onNewChat(chat) {
    var chats = this.state.chats;

    if (chats) {
      chats[chat.id] = chat;
      this.setState({
        chats: chats
      });
      this.setActiveChat(chat.id);
    }

    this.props.onNewChat && this.props.onNewChat(chat);
  };

  _proto.onEditChat = function onEditChat(chat) {
    var chats = this.state.chats;

    if (chats) {
      chats[chat.id] = chat;
      this.setState({
        chats: chats
      });
    }

    this.props.onEditChat && this.props.onEditChat(chat);
  };

  _proto.onDeleteChat = function onDeleteChat(chat) {
    var chats = this.state.chats;

    if (chats) {
      chats[chat.id] = undefined;
      this.setState({
        chats: chats
      });

      if (!_.isEmpty(chats)) {
        var sortedChats = this.sortChats(chats);
        this.setActiveChat(sortedChats[0] ? parseInt(sortedChats[0].id) : 0);
      }
    }

    this.props.onDeleteChat && this.props.onDeleteChat(chat);
  };

  _proto.onGetMessages = function onGetMessages(chatId, messages) {
    this.setState({
      messages: _.mapKeys(messages, 'id')
    });

    if (messages.length > 0) {
      var messageId = messages[messages.length - 1].id;
      readMessage(this.state.creds, this.state.activeChat, messageId, function () {});
    }

    this.props.onGetMessages && this.props.onGetMessages(chatId, messages);
  };

  _proto.sendingMessage = function sendingMessage(message) {
    var _extends2;

    this.setState({
      sendingMessages: _extends({}, this.state.sendingMessages, (_extends2 = {}, _extends2[message.custom_json.sender_id] = message, _extends2))
    });
  };

  _proto.onNewMessage = function onNewMessage(chatId, message) {
    var _this$state = this.state,
        sendingMessages = _this$state.sendingMessages,
        messages = _this$state.messages;

    if (typeof message.custom_json === "string" && message.custom_json.indexOf('sender_id') !== -1) {
      sendingMessages[JSON.parse(message.custom_json).sender_id] = undefined;
      this.setState({
        sendingMessages: sendingMessages
      });
    }

    if (chatId === this.state.activeChat) {
      messages[message.id] = message;
      this.setState({
        messages: messages
      });
    }

    readMessage(this.state.creds, this.state.activeChat, message.id);
    this.props.onNewMessage && this.props.onNewMessage(chatId, message);
  };

  _proto.onEditMessage = function onEditMessage(chatId, message) {
    if (chatId === this.state.activeChat) {
      var messages = this.state.messages;
      messages[message.id] = message;
      this.setState({
        messages: messages
      });
    }

    this.props.onEditMessage && this.props.onEditMessage(chatId, message);
  };

  _proto.onDeleteMessage = function onDeleteMessage(chatId, message) {
    if (chatId === this.state.activeChat) {
      var messages = this.state.messages;
      messages[message.id] = undefined;
      this.setState({
        messages: messages
      });
    }

    this.props.onDeleteMessage && this.props.onDeleteMessage(chatId, message);
  };

  _proto.onTyping = function onTyping(chatId, person) {
    var _this2 = this;

    if (this.state.typingCounter[chatId] && this.state.typingCounter[chatId][person]) {
      var _extends3, _extends4;

      this.setState(_extends({}, this.state, {
        typingCounter: _extends({}, this.state.typingCounter, (_extends4 = {}, _extends4[chatId] = _extends({}, this.state.typingCounter[chatId], (_extends3 = {}, _extends3[person] = this.state.typingCounter[chatId][person] + 1, _extends3)), _extends4))
      }));
    } else {
      var _extends5, _extends6;

      this.setState(_extends({}, this.state, {
        typingCounter: _extends({}, this.state.typingCounter, (_extends6 = {}, _extends6[chatId] = _extends({}, this.state.typingCounter[chatId], (_extends5 = {}, _extends5[person] = 1, _extends5)), _extends6))
      }));
    }

    this.props.onTyping && this.props.onTyping(chatId, person);
    setTimeout(function () {
      var _extends7, _extends8;

      _this2.setState(_extends({}, _this2.state, {
        typingCounter: _extends({}, _this2.state.typingCounter, (_extends8 = {}, _extends8[chatId] = _extends({}, _this2.state.typingCounter[chatId], (_extends7 = {}, _extends7[person] = _this2.state.typingCounter[chatId][person] - 1, _extends7)), _extends8))
      }));
    }, 2500);
  };

  _proto.componentDidMount = function componentDidMount() {
    getChats(this.props);
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    var _this3 = this;

    var _this$state2 = this.state,
        typingCounter = _this$state2.typingCounter,
        typingData = _this$state2.typingData;
    Object.keys(typingCounter).map(function (chat) {
      var typers = [];
      Object.keys(typingCounter[chat]).map(function (person) {
        if (typingCounter[chat][person] > 0) {
          typers.push(person);
        }
      });

      if (!typingData[chat] || typingData[chat].length !== typers.length) {
        var _extends9;

        _this3.setState(_extends({}, _this3.state, {
          typingData: _extends({}, _this3.state.typingData, (_extends9 = {}, _extends9[chat] = typers, _extends9))
        }));
      }
    });
  };

  _proto.componentDidMount = function componentDidMount() {
    var _this4 = this;

    getChats(this.props, function (chats) {
      return _this4.onGetChats(chats);
    });
  };

  _proto.render = function render() {
    var _this5 = this;

    var height = this.props.height;
    return /*#__PURE__*/React__default.createElement("div", {
      style: {
        textAlign: 'left',
        backgroundColor: 'white'
      }
    }, /*#__PURE__*/React__default.createElement(Socket, _extends({}, this.props, {
      onConnect: function onConnect(props) {
        return _this5.onConnect(props);
      },
      onDisconnect: function onDisconnect() {
        return _this5.setState({
          connecting: true
        });
      },
      onFailAuth: function onFailAuth(props) {
        return _this5.onFailAuth(props);
      },
      onGetChats: function onGetChats(chats) {
        return _this5.onGetChats(chats);
      },
      onNewChat: function onNewChat(chat) {
        return _this5.onNewChat(chat);
      },
      onEditChat: function onEditChat(chat) {
        return _this5.onEditChat(chat);
      },
      onDeleteChat: function onDeleteChat(chat) {
        return _this5.onDeleteChat(chat);
      },
      onAddPerson: function onAddPerson(chat) {
        return _this5.onEditChat(chat);
      },
      onRemovePerson: function onRemovePerson(chat) {
        return _this5.onEditChat(chat);
      },
      onTyping: function onTyping(chatId, person) {
        return _this5.onTyping(chatId, person);
      },
      onGetMessages: function onGetMessages(chatId, messages) {
        return _this5.onGetMessages(chatId, messages);
      },
      onNewMessage: function onNewMessage(chatId, message) {
        return _this5.onNewMessage(chatId, message);
      },
      onEditMessage: function onEditMessage(chatId, message) {
        return _this5.onEditMessage(chatId, message);
      },
      onDeleteMessage: function onDeleteMessage(chatId, message) {
        return _this5.onDeleteMessage(chatId, message);
      }
    })), /*#__PURE__*/React__default.createElement(reactGridSystem.Row, null, /*#__PURE__*/React__default.createElement(reactGridSystem.Col, {
      xs: 0,
      sm: 3,
      style: {
        height: height ? height : ''
      }
    }, this.props.renderChatList ? this.props.renderChatList(_extends({}, this.props, this.state)) : /*#__PURE__*/React__default.createElement(ChatList, _extends({}, this.props, this.state))), /*#__PURE__*/React__default.createElement(reactGridSystem.Col, {
      xs: 12,
      sm: 6,
      style: {
        height: height ? height : ''
      }
    }, this.props.renderChatFeed ? this.props.renderChatFeed(_extends({}, this.props, this.state)) : /*#__PURE__*/React__default.createElement(ChatFeed$1, _extends({}, this.props, this.state))), /*#__PURE__*/React__default.createElement(reactGridSystem.Col, {
      xs: 0,
      sm: 3,
      style: {
        height: height ? height : ''
      }
    }, this.props.renderChatSettings ? this.props.renderChatSettings(_extends({}, this.props, this.state)) : /*#__PURE__*/React__default.createElement(ChatSettingsContainer, _extends({}, this.props, this.state)))));
  };

  return App;
}(React.Component);

var SocketConnector = function SocketConnector(props) {
  if (props.hideUI) {
    return /*#__PURE__*/React__default.createElement(Socket, props);
  } else {
    return /*#__PURE__*/React__default.createElement(App, props);
  }
};

function isTyping(props, chatId, callback) {
  axios.post(getApiUrl(props) + "/chats/" + chatId + "/typing/", {}, {
    headers: {
      "Public-Key": props.publicKey ? props.publicKey : props.projectID,
      "User-Name": props.userName,
      "User-Secret": props.userPassword ? props.userPassword : props.userSecret
    }
  }).then(function (response) {
    callback && callback(response.data);
  })["catch"](function (error) {});
}

function addPerson(props, chatId, userName, callback) {
  axios.post(getApiUrl(props) + "/chats/" + chatId + "/people/", {
    username: userName
  }, {
    headers: {
      "Public-Key": props.publicKey ? props.publicKey : props.projectID,
      "User-Name": props.userName,
      "User-Secret": props.userPassword ? props.userPassword : props.userSecret
    }
  }).then(function (response) {
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('New Person Error', error);
  });
}

function removePerson(props, chatId, userName, callback) {
  axios.put(getApiUrl(props) + "/chats/" + chatId + "/people/", {
    username: userName
  }, {
    headers: {
      "Public-Key": props.publicKey ? props.publicKey : props.projectID,
      "User-Name": props.userName,
      "User-Secret": props.userPassword ? props.userPassword : props.userSecret
    }
  }).then(function (response) {
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('Delete Person Error', error);
  });
}

function getOtherPeople(props, chatId, successCallback, errorCallback) {
  axios.get(getApiUrl(props) + "/chats/" + chatId + "/others/", {
    headers: {
      "Public-Key": props.publicKey ? props.publicKey : props.projectID,
      "User-Name": props.userName,
      "User-Secret": props.userPassword ? props.userPassword : props.userSecret
    }
  }).then(function (response) {
    props.onGetOtherPeople && props.onGetOtherPeople(chatId, response.data);
    successCallback && successCallback(chatId, response.data);
  })["catch"](function (error) {
    console.log('Fetch Other People Error', error);
    errorCallback && errorCallback();
  });
}

function getMyData(props, callback) {
  axios.get(getApiUrl(props) + "/chats/me/", {
    headers: {
      "Public-Key": props.publicKey ? props.publicKey : props.projectID,
      "User-Name": props.userName,
      "User-Secret": props.userPassword ? props.userPassword : props.userSecret
    }
  }).then(function (response) {
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('Get Myself Error', error);
  });
}

function editMyData(props, data, callback) {
  axios.patch(getApiUrl(props) + "/chats/me/", data, {
    headers: {
      "Public-Key": props.publicKey ? props.publicKey : props.projectID,
      "User-Name": props.userName,
      "User-Secret": props.userPassword ? props.userPassword : props.userSecret
    }
  }).then(function (response) {
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('Edit Myself Error', error);
  });
}

function leaveChat(props, chatId, callback) {
  axios["delete"](getApiUrl(props) + "/chats/" + chatId + "/people/", {
    headers: {
      "Public-Key": props.publicKey ? props.publicKey : props.projectID,
      "User-Name": props.userName,
      "User-Secret": props.userPassword ? props.userPassword : props.userSecret
    }
  }).then(function (response) {
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('Delete Person Error', error);
  });
}

var Avatar = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Avatar, _Component);

  function Avatar() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      avatar: ''
    };
    return _this;
  }

  var _proto = Avatar.prototype;

  _proto.updateImg = function updateImg() {
    var avatar = this.props.avatar;
    avatar = avatar && avatar !== null ? avatar : '';

    if (avatar.split('?')[0] !== this.state.avatar.split('?')[0]) {
      this.setState({
        avatar: avatar
      });
    }
  };

  _proto.componentDidMount = function componentDidMount() {
    this.updateImg();
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.updateImg();
  };

  _proto.render = function render() {
    var _this$props = this.props,
        username = _this$props.username,
        is_online = _this$props.is_online;
    var customStyle = this.props.style ? this.props.style : {};
    var text = username ? username.substring(0, 2).toUpperCase() : '';
    var color = stringToColor(username);
    return /*#__PURE__*/React__default.createElement("div", {
      style: {
        width: '48px',
        height: '48px'
      }
    }, /*#__PURE__*/React__default.createElement("div", {
      style: {
        height: '0px'
      }
    }, /*#__PURE__*/React__default.createElement("div", {
      className: "ce-avatar",
      style: _extends({}, styles$k.avatar, customStyle, {
        backgroundColor: this.state.avatar ? 'white' : color,
        backgroundImage: this.state.avatar && "url(" + this.state.avatar + ")",
        backgroundRepeat: 'no-repeat',
        backgroundPosition: 'center',
        backgroundSize: '48px'
      })
    }, /*#__PURE__*/React__default.createElement("div", {
      className: "ce-avatar-text",
      style: styles$k.avatarText
    }, !this.state.avatar && text))), this.props.show_online !== false && /*#__PURE__*/React__default.createElement("div", {
      className: "ce-avatar-status",
      style: _extends({}, styles$k.status, {
        backgroundColor: is_online ? '#52c41a' : '#f5222d'
      })
    }));
  };

  return Avatar;
}(React.Component);
var styles$k = {
  avatar: {
    width: '44px',
    height: '44px',
    borderRadius: '22px',
    color: 'white',
    textAlign: 'center'
  },
  avatarText: {
    color: 'white',
    paddingTop: '12px',
    fontSize: '15px',
    fontWeight: '600'
  },
  status: {
    width: '8px',
    height: '8px',
    borderRadius: '100%',
    border: '2px solid white'
  }
};

var _dangerButton;

var Button = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Button, _Component);

  function Button() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      hovered: false
    };
    return _this;
  }

  var _proto = Button.prototype;

  _proto.render = function render() {
    var _this2 = this;

    var _this$props = this.props,
        value = _this$props.value,
        icon = _this$props.icon,
        theme = _this$props.theme,
        style = _this$props.style;
    var customStyle = style ? style : {};
    var hoverStyle = this.state.hovered ? styles$l.hoverButton : {};
    var themeStyle = theme === 'danger' ? styles$l.dangerButton : styles$l.button;
    return /*#__PURE__*/React__default.createElement("button", {
      type: this.props.type,
      onClick: function onClick() {
        return _this2.props.onClick && _this2.props.onClick();
      },
      onMouseEnter: function onMouseEnter() {
        return _this2.setState({
          hovered: true
        });
      },
      onMouseLeave: function onMouseLeave() {
        return _this2.setState({
          hovered: false
        });
      },
      style: _extends({}, themeStyle, customStyle, hoverStyle),
      className: "ce-primary-button " + (theme === 'danger' ? 'ce-danger-button' : '')
    }, icon === 'plus' && /*#__PURE__*/React__default.createElement(icons.PlusOutlined, null), icon === 'send' && /*#__PURE__*/React__default.createElement(icons.ArrowUpOutlined, null), icon === 'delete' && /*#__PURE__*/React__default.createElement(icons.DeleteOutlined, null), icon === 'user-add' && /*#__PURE__*/React__default.createElement(icons.UserAddOutlined, null), value && icon ? " " + value : value);
  };

  return Button;
}(React.Component);
var styles$l = {
  button: {
    color: 'white',
    border: 'none',
    outline: 'none',
    height: '36px',
    fontSize: '15px',
    cursor: 'pointer',
    padding: '8px 16px',
    borderRadius: '33px',
    backgroundColor: '#1890ff'
  },
  dangerButton: (_dangerButton = {
    color: 'red',
    border: 'none',
    outline: 'none',
    height: '36px',
    fontSize: '15px',
    cursor: 'pointer',
    padding: '8px 16px',
    borderRadius: '33px',
    backgroundColor: 'white'
  }, _dangerButton["border"] = '1px solid red', _dangerButton),
  hoverButton: {
    opacity: '0.66'
  }
};

var TextInput = /*#__PURE__*/function (_Component) {
  _inheritsLoose(TextInput, _Component);

  function TextInput() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      focused: false,
      value: null
    };
    return _this;
  }

  var _proto = TextInput.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var value = this.props["default"];

    if (value) {
      var event = {
        target: {
          value: value
        }
      };
      this.props.handleChange(event);
      this.setState({
        value: value
      });
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    var customStyle = this.props.style ? this.props.style : {};
    var defaultStyle = this.state.focused ? styles$m.focusInput : styles$m.input;
    return (
      /*#__PURE__*/
      React__default.createElement("input", {
        className: "ce-input ce-text-input",
        value: this.props.value,
        placeholder: this.props.label,
        style: _extends({}, defaultStyle, customStyle),
        onBlur: function onBlur() {
          return _this2.setState({
            focused: false
          });
        },
        onFocus: function onFocus() {
          return _this2.setState({
            focused: true
          });
        },
        type: this.props.type ? this.props.type : "text",
        onChange: function onChange(e) {
          return _this2.props.handleChange && _this2.props.handleChange(e);
        }
      })
    );
  };

  return TextInput;
}(React.Component);
var styles$m = {
  input: {
    height: '36px',
    fontSize: '15px',
    outline: 'none',
    borderRadius: '24px',
    border: '1px solid #d9d9d9',
    padding: '0px 12px',
    boxSizing: 'border-box'
  },
  focusInput: {
    height: '36px',
    fontSize: '15px',
    outline: 'none',
    borderRadius: '24px',
    border: '1px solid #1890ff',
    padding: '0px 12px',
    boxSizing: 'border-box'
  }
};

var TextAreaInput = /*#__PURE__*/function (_Component) {
  _inheritsLoose(TextAreaInput, _Component);

  function TextAreaInput() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      focused: false,
      value: null
    };
    return _this;
  }

  var _proto = TextAreaInput.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var value = this.props["default"];

    if (value) {
      this.props.handleChange({
        target: {
          value: value
        }
      });
      this.setState({
        value: value
      });
    }
  };

  _proto.resize = function resize() {
    var textarea = document.getElementById("msg-textarea");
    textarea.style.height = "";
    textarea.style.height = Math.min(textarea.scrollHeight, 150) + "px";
  };

  _proto.componentDidMount = function componentDidMount() {
    this.resize();
  };

  _proto.handleChange = function handleChange(e) {
    this.resize();
    this.props.handleChange && this.props.handleChange(e);
  };

  _proto.onKeyDown = function onKeyDown(e) {
    if (e.key === 'Enter') {
      e.preventDefault();

      if (this.props.value.length > 0) {
        this.props.onSubmit && this.props.onSubmit(e);
      }
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    return /*#__PURE__*/React__default.createElement("textarea", {
      id: "msg-textarea",
      className: "ce-input ce-textarea-input",
      rows: "1",
      style: styles$n.input,
      value: this.props.value,
      placeholder: this.props.label,
      onBlur: function onBlur() {
        return _this2.setState({
          focused: false
        });
      },
      onFocus: function onFocus() {
        return _this2.setState({
          focused: true
        });
      },
      type: this.props.type ? this.props.type : "text",
      onChange: function onChange(e) {
        return _this2.handleChange(e);
      },
      onKeyDown: function onKeyDown(e) {
        return _this2.onKeyDown(e);
      }
    });
  };

  return TextAreaInput;
}(React.Component);
var styles$n = {
  input: {
    border: '1px solid white',
    width: 'calc(100% - 64px - 24px - 44px)',
    outline: 'none',
    fontFamily: 'inherit',
    fontSize: '15px',
    paddingLeft: '12px',
    paddingRight: '12px',
    position: 'relative',
    left: '12px',
    resize: 'none'
  }
};

var AutoComplete = /*#__PURE__*/function (_Component) {
  _inheritsLoose(AutoComplete, _Component);

  function AutoComplete() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      focused: false,
      showAll: false
    };
    return _this;
  }

  var _proto = AutoComplete.prototype;

  _proto.onFocus = function onFocus() {
    this.onChange('', true);
    this.setState({
      focused: true
    });
    this.props.onFocus && this.props.onFocus();
  };

  _proto.onBlur = function onBlur() {
    this.setState({
      focused: false
    });
    this.props.onBlur && this.props.onBlur();
  };

  _proto.onChange = function onChange(value, showAll) {
    this.setState({
      showAll: showAll
    });
    this.props.handleChange && this.props.handleChange(value);
  };

  _proto.getNames = function getNames() {
    var _this2 = this;

    var count = 0;
    var max = this.props.max ? this.props.max : 3;
    var results = [];
    this.props.options.map(function (option) {
      if (JSON.stringify(option).toLowerCase().indexOf(_this2.props.value.toLowerCase()) !== -1 && count < max) {
        count = count + 1;
        results.push(option);
      }
    });
    return results;
  };

  _proto.renderOptions = function renderOptions() {
    var _this3 = this;

    if (!this.props.value && !this.state.showAll) {
      return /*#__PURE__*/React__default.createElement("div", null);
    }

    var results = this.getNames();
    return results.map(function (option, index) {
      return /*#__PURE__*/React__default.createElement("div", {
        key: "option_" + index,
        className: "ce-autocomplete-option"
      }, _this3.props.renderOption && _this3.props.renderOption(option), index === results.length - 1 && /*#__PURE__*/React__default.createElement("div", {
        style: styles$o.close,
        className: "ce-autocomplete-close",
        onClick: function onClick() {
          return _this3.onChange('', false);
        }
      }, /*#__PURE__*/React__default.createElement(icons.CloseOutlined, null)));
    });
  };

  _proto.render = function render() {
    var _this4 = this;

    var options = this.props.options;
    var customStyle = this.props.style ? this.props.style : {};

    var defaultStyle = _extends({}, styles$o.input, {
      border: this.state.focused ? '1px solid #1890ff' : '1px solid #d9d9d9'
    });

    return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("input", {
      className: "ce-input ce-autocomplete-input",
      value: this.props.value,
      placeholder: this.props.label,
      style: _extends({}, defaultStyle, customStyle),
      type: this.props.type ? this.props.type : "text",
      onBlur: function onBlur() {
        return _this4.onBlur();
      },
      onFocus: function onFocus() {
        return _this4.onFocus();
      },
      onChange: function onChange(e) {
        return _this4.onChange(e.target.value, true);
      }
    }), options && options.length > 0 && this.state.showAll && /*#__PURE__*/React__default.createElement("div", {
      className: "ce-autocomplete-options",
      style: {
        borderRadius: '19px',
        border: '1px solid #afafaf',
        overflow: 'hidden'
      }
    }, this.props.options && this.renderOptions()));
  };

  return AutoComplete;
}(React.Component);
var styles$o = {
  input: {
    height: '36px',
    fontSize: '15px',
    outline: 'none',
    borderRadius: '24px',
    padding: '0px 12px',
    boxSizing: 'border-box'
  },
  close: {
    cursor: 'pointer',
    textAlign: 'center',
    padding: '8px 12px',
    fontSize: '15px',
    borderRadius: '24px'
  }
};

var ChatEngine = function ChatEngine(props) {
  return /*#__PURE__*/React__default.createElement(SocketConnector, props);
};

exports.AutoCompleteInput = AutoComplete;
exports.Avatar = Avatar;
exports.Button = Button;
exports.ChatCard = ChatCard;
exports.ChatEngine = ChatEngine;
exports.ChatFeed = ChatFeed$1;
exports.ChatHeader = ChatHeader;
exports.ChatList = ChatList;
exports.ChatSettings = ChatSettingsContainer;
exports.ChatSettingsTop = ChatSettingsTop;
exports.Dot = Dot;
exports.IsTyping = ChatFeed;
exports.MessageBubble = Message$1;
exports.NewChatForm = ChatForm;
exports.NewMessageForm = NewMessageForm$1;
exports.OptionsSettings = Options;
exports.PeopleSettings = PeopleList;
exports.PhotosSettings = Photos;
exports.TextAreaInput = TextAreaInput;
exports.TextInput = TextInput;
exports.addPerson = addPerson;
exports.deleteChat = deleteChat;
exports.deleteMessage = deleteMessage;
exports.editChat = editChat;
exports.editMessage = editMessage;
exports.editMyData = editMyData;
exports.getChats = getChats;
exports.getMessages = getMessages;
exports.getMyData = getMyData;
exports.getOtherPeople = getOtherPeople;
exports.isTyping = isTyping;
exports.leaveChat = leaveChat;
exports.newChat = newChat;
exports.removePerson = removePerson;
exports.sendMessage = sendMessage;
//# sourceMappingURL=index.js.map
